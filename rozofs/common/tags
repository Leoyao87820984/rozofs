!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CLEAR_PROBE	profile.h	91;"	d
CLOSE_CONTROL	exp_trck_inode_srv_v2.c	35;"	d	file:
DEBUG	log.h	54;"	d
DEBUG	log.h	56;"	d
DEBUG_FUNCTION	log.h	61;"	d
DEBUG_FUNCTION	log.h	63;"	d
DECLARE_PROFILING	profile.h	32;"	d
DEFINE_PROFILING	profile.h	33;"	d
EDEBUG	log.h	25;"	d
EFATAL	log.h	29;"	d
EINFO	log.h	26;"	d
ESEVERE	log.h	28;"	d
EWARNING	log.h	27;"	d
EXPORT_TRACK_CREATE_H	export_track.h	38;"	d
EXP_TRCK_MAIN_FILENAME	export_track.h	40;"	d
EXP_TRCK_MAIN_REPLICA_COUNT	export_track.h	85;"	d
EXP_TRCK_MAX_INODE_PER_FILE	export_track.h	73;"	d
EXP_TRCK_MAX_RECURSE	export_track.h	81;"	d
EXP_TRCK_MAX_USER_ID	export_track.h	101;"	d
FALSE	types.h	21;"	d
FALSE	types.h	22;"	d
GEO_MAX_RECORDS	geo_replica_str.h	23;"	d
GEO_REPLICA_STR_H	geo_replica_str.h	19;"	d
GET_FILE_OFFSET	export_track.h	72;"	d
MICROLONG	profile.h	29;"	d
P_BYTES	profile.h	38;"	d
P_COUNT	profile.h	36;"	d
P_ELAPSE	profile.h	37;"	d
ROZOFS_I_EXTRA_ISIZE	mattr.h	65;"	d
ROZOFS_OBJ_NAME_MAX	mattr.h	50;"	d
SET_PROBE_VALUE	profile.h	84;"	d
START_PROFILING	profile.h	42;"	d
START_PROFILING_IO	profile.h	53;"	d
STOP_PROFILING	profile.h	65;"	d
STOP_PROFILING_IO	profile.h	74;"	d
TRUE	types.h	23;"	d
TRUE	types.h	24;"	d
XMALLOC_MAX_SIZE	xmalloc.c	35;"	d	file:
_DAEMON_H	daemon.h	20;"	d
_DIST_H	dist.h	20;"	d
_HTABLE	htable.h	20;"	d
_LIST_H	list.h	20;"	d
_LOG_H	log.h	20;"	d
_MATTR_H	mattr.h	20;"	d
_PROFILE_H	profile.h	20;"	d
_ROZOFS_SITE_H	rozofs_site.h	19;"	d
_TRANSFORM_H	transform.h	20;"	d
_TYPES_H	types.h	20;"	d
_XMALLOC_H	xmalloc.h	20;"	d
_exp_trck_file_header_t	export_track.h	/^typedef struct _exp_trck_file_header_t$/;"	s
_exp_trck_header_memory_t	export_track.h	/^typedef struct _exp_trck_header_memory_t$/;"	s
_exp_trck_header_t	export_track.h	/^typedef struct _exp_trck_header_t $/;"	s
_exp_trck_top_header_t	export_track.h	/^typedef struct _exp_trck_top_header_t$/;"	s
_geo_fid_entry_t	geo_replica_str.h	/^ typedef struct _geo_fid_entry_t$/;"	s
_xmalloc_stats_t	xmalloc.c	/^typedef struct _xmalloc_stats_t$/;"	s	file:
angle	transform.h	/^    angle_t angle;$/;"	m	struct:projection
angle	transform.h	/^typedef struct angle {$/;"	s
angle_t	transform.h	/^} angle_t;$/;"	t	typeref:struct:angle
atime	mattr.h	/^    uint64_t atime;                 \/**< see stat(2) *\/$/;"	m	struct:mattr
attrs	mattr.h	/^     mattr_t attrs;  \/**< standard attributes       *\/$/;"	m	struct:__anon1::__anon2
bin_t	transform.h	/^typedef uint64_t bin_t;         \/\/ bin$/;"	t
bins	transform.h	/^    bin_t *bins;$/;"	m	struct:projection
buckets	htable.h	/^    list_t *buckets;$/;"	m	struct:htable
check_memory	xmalloc.h	26;"	d
children	mattr.h	/^    uint32_t children;              \/**< number of children (excluding . and ..) *\/$/;"	m	struct:mattr
cid	geo_replica_str.h	/^    cid_t cid;  \/**< cluster id 0 for non regular files *\/$/;"	m	struct:_geo_fid_entry_t
cid	mattr.h	/^    cid_t cid;                      \/**< cluster id 0 for non regular files *\/$/;"	m	struct:mattr
close_count	exp_trck_inode_srv_v2.c	/^int close_count;$/;"	v
cmp	htable.h	/^    int (*cmp) (void *, void *);$/;"	m	struct:htable
compare_slope	transform.c	/^static int compare_slope(const void *e1, const void *e2) {$/;"	f	file:
compare_slope_inline	transform.h	/^static inline int compare_slope_inline(const void *e1, const void *e2) {$/;"	f
count	xmalloc.c	/^   uint64_t  count;$/;"	m	struct:_xmalloc_stats_t	file:
create_flag	export_track.h	/^   int create_flag;    \/**< assert to 1 when tracking main file has to be created *\/$/;"	m	struct:_exp_trck_top_header_t
creation_time	export_track.h	/^     uint64_t  creation_time;    \/**< creation time of the tracking file             *\/$/;"	m	struct:_exp_trck_file_header_t
ctime	mattr.h	/^    uint64_t ctime;                 \/**< see stat(2) *\/$/;"	m	struct:mattr
cur_idx	export_track.h	/^     uint16_t cur_idx;           \/**< current inode index within the tracking file              *\/$/;"	m	struct:_exp_trck_header_memory_t
cur_main_idx	export_track.h	/^     uint64_t cur_main_idx;    \/**< current starting index for lookup *\/$/;"	m	struct:_exp_trck_header_memory_t
cur_tracking_file_fd	export_track.h	/^     int cur_tracking_file_fd;   \/**< file descriptor associated with the current tracking file *\/$/;"	m	struct:_exp_trck_header_memory_t
daemon_start	daemon.c	/^void daemon_start(char * path, int nbCoreFiles, const char *name, void (*on_start) (void),$/;"	f
dist_is_set	dist.h	43;"	d
dist_set_false	dist.h	57;"	d
dist_set_true	dist.h	50;"	d
dist_set_value	dist.h	65;"	d
dist_t	dist.h	/^typedef uint16_t dist_t;$/;"	t
entry	export_track.h	/^     exp_trck_header_t entry;  \/**< tracking context entry *\/$/;"	m	struct:_exp_trck_header_memory_t
entry_p	export_track.h	/^   exp_trck_header_memory_t *entry_p[EXP_TRCK_MAX_USER_ID];$/;"	m	struct:_exp_trck_top_header_t
exp_metadata_allocate_inode	exp_trck_inode_srv_v2.c	/^int exp_metadata_allocate_inode(exp_trck_top_header_t *top_hdr_p,rozofs_inode_t *inode,uint16_t key,uint8_t slice)$/;"	f
exp_metadata_get_main_tracking_file_header	exp_trck_inode_srv_v2.c	/^int exp_metadata_get_main_tracking_file_header(exp_trck_top_header_t *top_hdr_p,$/;"	f
exp_metadata_get_tracking_file_count	exp_trck_inode_srv_v2.c	/^uint64_t exp_metadata_get_tracking_file_count(exp_trck_file_header_t *track_hdr_p)$/;"	f
exp_metadata_get_tracking_file_header	exp_trck_inode_srv_v2.c	/^int exp_metadata_get_tracking_file_header(exp_trck_top_header_t *top_hdr_p,$/;"	f
exp_metadata_read_attributes	exp_trck_inode_srv_v2.c	/^int exp_metadata_read_attributes(exp_trck_top_header_t *top_hdr_p,rozofs_inode_t *inode,void *attr_p,int attr_sz)$/;"	f
exp_metadata_release_inode	exp_trck_inode_srv_v2.c	/^int exp_metadata_release_inode(exp_trck_top_header_t *top_hdr_p,rozofs_inode_t *inode)$/;"	f
exp_metadata_trck_lookup_ctx_init	exp_trck_inode_srv_v2.c	/^int exp_metadata_trck_lookup_ctx_init(exp_trck_header_memory_t  *main_trck_p)$/;"	f
exp_metadata_update_main_tracking_file_header	exp_trck_inode_srv_v2.c	/^int exp_metadata_update_main_tracking_file_header(exp_trck_top_header_t *top_hdr_p,$/;"	f
exp_metadata_write_attributes	exp_trck_inode_srv_v2.c	/^int exp_metadata_write_attributes(exp_trck_top_header_t *top_hdr_p,rozofs_inode_t *inode,void *attr_p,int attr_sz)$/;"	f
exp_trck_allocate_header_memory	exp_trck_inode_srv_v2.c	/^exp_trck_header_memory_t *exp_trck_allocate_header_memory(exp_trck_top_header_t *top_hdr_p,int user_id,int create_flag)$/;"	f
exp_trck_check_tracking_file_full	exp_trck_inode_srv_v2.c	/^int  exp_trck_check_tracking_file_full(exp_trck_header_memory_t *main_trck_p)$/;"	f
exp_trck_file_header_t	export_track.h	/^} exp_trck_file_header_t;$/;"	t	typeref:struct:_exp_trck_file_header_t
exp_trck_get_relative_inode_idx	exp_trck_inode_srv_v2.c	/^int exp_trck_get_relative_inode_idx(int fd,char *root_path ,rozofs_inode_t *inode)$/;"	f
exp_trck_get_tracking_file_header	exp_trck_inode_srv_v2.c	/^int exp_trck_get_tracking_file_header(exp_trck_header_memory_t  *main_trck_p,uint64_t file_id,exp_trck_file_header_t *buf_p,int *nb_entries_p)$/;"	f
exp_trck_header_memory_t	export_track.h	/^} exp_trck_header_memory_t;$/;"	t	typeref:struct:_exp_trck_header_memory_t
exp_trck_header_t	export_track.h	/^} exp_trck_header_t;$/;"	t	typeref:struct:_exp_trck_header_t
exp_trck_increment_main_tracking_file	exp_trck_inode_srv_v2.c	/^int exp_trck_increment_main_tracking_file(exp_trck_header_memory_t *main_trck_p)$/;"	f
exp_trck_main_allocate_inode	exp_trck_inode_srv_v2.c	/^int exp_trck_main_allocate_inode(exp_trck_header_memory_t  *main_trck_p,rozofs_inode_t *inode)$/;"	f
exp_trck_open_and_read_main_tracking_file	exp_trck_inode_srv_v2.c	/^int exp_trck_open_and_read_main_tracking_file(char * root_path,uint8_t user_id,void *data_p,int create_flag)$/;"	f
exp_trck_open_tracking_file	exp_trck_inode_srv_v2.c	/^int exp_trck_open_tracking_file(exp_trck_header_memory_t *main_trck_p, int *reloop)$/;"	f
exp_trck_release_header_memory	exp_trck_inode_srv_v2.c	/^void exp_trck_release_header_memory(exp_trck_header_memory_t *p)$/;"	f
exp_trck_rw_attributes	exp_trck_inode_srv_v2.c	/^int exp_trck_rw_attributes(char *root_path,rozofs_inode_t *inode,void *attr_p,int attr_sz,int max_attr_sz,int read)$/;"	f
exp_trck_top_add_user_id	exp_trck_inode_srv_v2.c	/^int exp_trck_top_add_user_id(exp_trck_top_header_t *top_hdr_p,int user_id)$/;"	f
exp_trck_top_allocate	exp_trck_inode_srv_v2.c	/^exp_trck_top_header_t *exp_trck_top_allocate(char *name,char *root_path,uint16_t max_attributes_sz,int create_flag)$/;"	f
exp_trck_top_header_t	export_track.h	/^} exp_trck_top_header_t;$/;"	t	typeref:struct:_exp_trck_top_header_t
exp_trck_top_release	exp_trck_inode_srv_v2.c	/^int exp_trck_top_release(exp_trck_top_header_t *top_hdr_p)$/;"	f
exp_trck_write_main_tracking_file	exp_trck_inode_srv_v2.c	/^int exp_trck_write_main_tracking_file(char * root_path,uint8_t user_id,off_t offset,size_t size,void *data_p)$/;"	f
ext_mattr_t	mattr.h	/^} ext_mattr_t;$/;"	t	typeref:union:__anon1
fatal	log.h	51;"	d
fd	export_track.h	/^     int fd[EXP_TRCK_MAIN_REPLICA_COUNT];   \/**< file descriptor of the main tracking file    *\/$/;"	m	struct:_exp_trck_header_memory_t
fid	geo_replica_str.h	/^    fid_t fid;$/;"	m	struct:_geo_fid_entry_t
fid	mattr.h	/^    fid_t fid;                      \/**< unique file id *\/$/;"	m	struct:mattr
fid_t	export_track.h	/^typedef uuid_t fid_t;$/;"	t
first_idx	export_track.h	/^  uint64_t first_idx;  \/**< first file index within a tracking directory *\/$/;"	m	struct:_exp_trck_header_t
geo_fid_entry_t	geo_replica_str.h	/^} geo_fid_entry_t;$/;"	t	typeref:struct:_geo_fid_entry_t
gid	mattr.h	/^    uint32_t gid;                   \/**< see stat(2) *\/$/;"	m	struct:mattr
hash	htable.h	/^    uint32_t(*hash) (void *);$/;"	m	struct:htable
hash_entry	htable.c	/^typedef struct hash_entry {$/;"	s	file:
hash_entry_t	htable.c	/^} hash_entry_t;$/;"	t	typeref:struct:hash_entry	file:
htable	htable.h	/^typedef struct htable {$/;"	s
htable_del	htable.c	/^inline void *htable_del(htable_t * h, void *key) {$/;"	f
htable_get	htable.c	/^inline void *htable_get(htable_t * h, void *key) {$/;"	f
htable_initialize	htable.c	/^inline void htable_initialize(htable_t * h, uint32_t size, uint32_t(*hash) (void *),$/;"	f
htable_put	htable.c	/^inline void htable_put(htable_t * h, void *key, void *value) {$/;"	f
htable_release	htable.c	/^inline void htable_release(htable_t * h) {$/;"	f
htable_t	htable.h	/^} htable_t;$/;"	t	typeref:struct:htable
i_extra_isize	mattr.h	/^     uint32_t i_extra_isize;  \/**< array reserved for extended attributes *\/$/;"	m	struct:__anon1::__anon2
i_file_acl	mattr.h	/^     uint64_t i_file_acl;  \/**< extended inode *\/$/;"	m	struct:__anon1::__anon2
i_link_name	mattr.h	/^     uint64_t i_link_name;  \/**< symlink block *\/$/;"	m	struct:__anon1::__anon2
i_state	mattr.h	/^     uint32_t i_state;     \/**< inode state               *\/$/;"	m	struct:__anon1::__anon2
index_available	export_track.h	/^     int index_available;      \/**< 1: current tracking file is available                     *\/$/;"	m	struct:_exp_trck_header_memory_t
info	log.h	48;"	d
inode_buf	mattr.h	/^   char inode_buf[512];$/;"	m	union:__anon1
inode_idx_table	export_track.h	/^     uint16_t  inode_idx_table[EXP_TRCK_MAX_INODE_PER_FILE];  \/**< table that contains the relative inode idx within the file     *\/$/;"	m	struct:_exp_trck_file_header_t
key	htable.c	/^    void *key;$/;"	m	struct:hash_entry	file:
last_idx	export_track.h	/^  uint64_t last_idx; \/**< last file index within a tracking directory    *\/$/;"	m	struct:_exp_trck_header_t
layout	geo_replica_str.h	/^    uint8_t layout;$/;"	m	struct:_geo_fid_entry_t
list	htable.c	/^    list_t list;$/;"	m	struct:hash_entry	file:
list	list.h	/^typedef struct list {$/;"	s
list_empty	list.h	/^static inline int list_empty(list_t * head) {$/;"	f
list_entry	list.h	147;"	d
list_first_entry	list.h	150;"	d
list_for_each_backward	list.h	156;"	d
list_for_each_backward_safe	list.h	163;"	d
list_for_each_forward	list.h	153;"	d
list_for_each_forward_safe	list.h	159;"	d
list_init	list.h	/^static inline void list_init(list_t * list) {$/;"	f
list_insert	list.h	/^static inline void list_insert(list_t * new, list_t * prev, list_t * next) {$/;"	f
list_push_back	list.h	/^static inline void list_push_back(list_t * head, list_t * new) {$/;"	f
list_push_front	list.h	/^static inline void list_push_front(list_t * head, list_t * new) {$/;"	f
list_remove	list.h	/^static inline void list_remove(list_t * list) {$/;"	f
list_size	list.h	/^static inline int list_size(list_t * head) {$/;"	f
list_sort	list.h	/^static inline void list_sort(list_t * head,$/;"	f
list_t	list.h	/^} list_t;$/;"	t	typeref:struct:list
logmsg	log.h	43;"	d
mattr	mattr.h	/^typedef struct mattr {$/;"	s
mattr_initialize	mattr.c	/^void mattr_initialize(mattr_t *mattr) {$/;"	f
mattr_release	mattr.c	/^void mattr_release(mattr_t *mattr) {$/;"	f
mattr_t	mattr.h	/^} mattr_t;$/;"	t	typeref:struct:mattr
max	transform.c	/^static inline int max(int a, int b) {$/;"	f	file:
max_attributes_sz	export_track.h	/^     uint16_t max_attributes_sz;  \/**< max size of the attributes :512,1024,1024+512 etc.. *\/$/;"	m	struct:_exp_trck_header_memory_t
max_attributes_sz	export_track.h	/^   uint16_t max_attributes_sz;  \/**< max size of the attributes :512,1024,1024+512 etc.. *\/$/;"	m	struct:_exp_trck_top_header_t
max_inline	transform.h	/^static inline int max_inline(int a, int b) {$/;"	f
messages	log.h	/^static const char *messages[] =$/;"	v
messages	log.h	/^static const char *messages[] __attribute__ ((unused)) =$/;"	v
mode	mattr.h	/^    uint32_t mode;                  \/**< see stat(2) *\/$/;"	m	struct:mattr
mtime	mattr.h	/^    uint64_t mtime;                 \/**< see stat(2) *\/$/;"	m	struct:mattr
name	export_track.h	/^   char name[256];    \/**< name of the table   *\/$/;"	m	struct:_exp_trck_top_header_t
name	mattr.h	/^     char    name[ROZOFS_OBJ_NAME_MAX]; $/;"	m	struct:__anon1::__anon2
next	list.h	/^    struct list *next, *prev;$/;"	m	struct:list	typeref:struct:list::list
nlink	mattr.h	/^    uint16_t nlink;                 \/**< see stat(2) *\/$/;"	m	struct:mattr
no_daemon_start	daemon.c	/^void no_daemon_start(char * path, int nbCoreFiles, const char *name, void (*on_start) (void),$/;"	f
off_end	geo_replica_str.h	/^    uint64_t off_end;$/;"	m	struct:_geo_fid_entry_t
off_start	geo_replica_str.h	/^    uint64_t off_start;$/;"	m	struct:_geo_fid_entry_t
open_count	exp_trck_inode_srv_v2.c	/^int open_count;$/;"	v
p	transform.h	/^    int p;$/;"	m	struct:angle
pfid	mattr.h	/^     fid_t   pfid;   \/**< parent fid                *\/$/;"	m	struct:__anon1::__anon2
pid_file	daemon.c	/^static char pid_file[255];$/;"	v	file:
prev	list.h	/^    struct list *next, *prev;$/;"	m	struct:list	typeref:struct:list::
priorities	log.h	/^static const int priorities[] = {$/;"	v
projection	transform.h	/^typedef struct projection {$/;"	s
projection_t	transform.h	/^} projection_t;$/;"	t	typeref:struct:projection
pxl_t	transform.h	/^typedef uint64_t pxl_t;         \/\/ pixel$/;"	t
q	transform.h	/^    int q;$/;"	m	struct:angle
read_pid	daemon.c	/^static int read_pid(const char *name, int *pid) {$/;"	f	file:
remove_pid_file	daemon.c	/^static void remove_pid_file(int sig) {$/;"	f	file:
root_path	export_track.h	/^     char    *root_path;     \/**< root path of the tracking system for the user               *\/$/;"	m	struct:_exp_trck_header_memory_t
root_path	export_track.h	/^   char root_path[1024];  $/;"	m	struct:_exp_trck_top_header_t
rozofs_get_local_site	rozofs_site.c	/^int rozofs_get_local_site()$/;"	f
s	mattr.h	/^   } s;$/;"	m	union:__anon1	typeref:struct:__anon1::__anon2
severe	log.h	50;"	d
sids	geo_replica_str.h	/^    sid_t sids[ROZOFS_SAFE_MAX];    \/**< sid of storage nodes target (regular file only)*\/$/;"	m	struct:_geo_fid_entry_t
sids	mattr.h	/^    sid_t sids[ROZOFS_SAFE_MAX];    \/**< sid of storage nodes target (regular file only)*\/$/;"	m	struct:mattr
size	htable.h	/^    uint32_t size;$/;"	m	struct:htable
size	mattr.h	/^    uint64_t size;                  \/**< see stat(2) *\/$/;"	m	struct:mattr
size	transform.h	/^    int size;$/;"	m	struct:projection
size	xmalloc.c	/^   int       size;$/;"	m	struct:_xmalloc_stats_t	file:
tracking_file_hdr_p	export_track.h	/^     exp_trck_file_header_t *tracking_file_hdr_p;  \/**< pointer to the tracking file header     *\/$/;"	m	struct:_exp_trck_header_memory_t
transform_forward	transform.c	/^void transform_forward(const bin_t * support, int rows, int cols, int np,$/;"	f
transform_forward_one_proj	transform.c	/^void transform_forward_one_proj(const bin_t * support, int rows, int cols,$/;"	f
transform_inverse	transform.c	/^void transform_inverse(pxl_t * support, int rows, int cols, int np,$/;"	f
transform_inverse_inline	transform.h	/^static inline void transform_inverse_inline(pxl_t * support, int rows, int cols, int np,$/;"	f
uid	mattr.h	/^    uint32_t uid;                   \/**< see stat(2) *\/$/;"	m	struct:mattr
user_id	export_track.h	/^     uint8_t user_id;        \/**< user identifier: typical the number of the directory        *\/$/;"	m	struct:_exp_trck_header_memory_t
value	htable.c	/^    void *value;$/;"	m	struct:hash_entry	file:
warning	log.h	49;"	d
write_pid	daemon.c	/^static int write_pid(const char *name) {$/;"	f	file:
xcalloc	xmalloc.c	/^void *xcalloc(size_t n, size_t s) {$/;"	f
xmalloc	xmalloc.c	/^void *xmalloc(size_t n) {$/;"	f
xmalloc_size_table_p	xmalloc.c	/^xmalloc_stats_t *xmalloc_size_table_p = NULL;$/;"	v
xmalloc_stats_insert	xmalloc.c	/^void xmalloc_stats_insert(int n)$/;"	f
xmalloc_stats_t	xmalloc.c	/^} xmalloc_stats_t;$/;"	t	typeref:struct:_xmalloc_stats_t	file:
xrealloc	xmalloc.c	/^void *xrealloc(void *p, size_t n) {$/;"	f
xstrdup	xmalloc.c	/^char *xstrdup(const char *str) {$/;"	f
