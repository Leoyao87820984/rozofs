/*

 File generated by ../../tools/common_config.py from common_config.input

 Copyright (c) 2010 Fizians SAS. <http://www.fizians.com>
 This file is part of Rozofs.

 Rozofs is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published
 by the Free Software Foundation, version 2.

 Rozofs is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see
 <http://www.gnu.org/licenses/>.
 */
#ifndef _COMMON_CONFIG_READ_SHOW_H
#define _COMMON_CONFIG_READ_SHOW_H

#include <stdint.h>
#include <string.h>
#include <errno.h>
#include <libconfig.h>
#include <unistd.h>
#include <inttypes.h>
#include <sys/types.h>
/*____________________________________________________________________________________________
**
** common_config man function
**
*/
void man_common_config(char * pChar) {
  pChar += rozofs_string_append_underscore(pChar,"\nUsage:\n");
  pChar += rozofs_string_append_bold(pChar,"\tcconf");
  pChar += rozofs_string_append     (pChar,"\t\tdisplays the whole common_config configuration.\n");
  pChar += rozofs_string_append_bold(pChar,"\tcconf <scope>");
  pChar += rozofs_string_append     (pChar,"\tdisplays only the <scope> configuration part.\n");
  pChar += rozofs_string_append_bold(pChar,"\tcconf reload");
  pChar += rozofs_string_append     (pChar,"\treloads and then displays the configuration.\n");
}
/*____________________________________________________________________________________________
**
** global scope configuration parameters
**
*/
char * show_common_config_module_global(char * pChar) {

  pChar += rozofs_string_append_bold(pChar,"#\n");
  pChar += rozofs_string_append_bold(pChar,"# ");
  pChar += rozofs_string_append_bold(pChar,"global");
  pChar += rozofs_string_append_bold(pChar," scope configuration parameters\n");
  pChar += rozofs_string_append_bold(pChar,"#\n\n");

  COMMON_CONFIG_IS_DEFAULT_INT(nb_core_file,1);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Number of core files that each module is allowed to keep.\n");
  pChar += rozofs_string_append(pChar,"// Older core files are kept while newest are removed.	\n");
  COMMON_CONFIG_SHOW_INT_OPT(nb_core_file,1,"0:8");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_STRING(core_file_directory,"");
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Directory where the core files are stored.\n");
  COMMON_CONFIG_SHOW_STRING(core_file_directory,"");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(numa_aware,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Enables to take into account the NUMA architecture of the board in \n");
  pChar += rozofs_string_append(pChar,"// order to collocate some RozoFS modules on the same node for memory\n");
  pChar += rozofs_string_append(pChar,"// access efficiency.\n");
  COMMON_CONFIG_SHOW_BOOL(numa_aware,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(storio_slice_number,1024);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Number of slices in the STORIO.\n");
  COMMON_CONFIG_SHOW_INT_OPT(storio_slice_number,1024,"8:(32*1024)");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(file_distribution_rule,0);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// File distribution mode upon cluster, storages and devices. Check rozofs.conf manual.\n");
  pChar += rozofs_string_append(pChar,"// 0      = size balancing\n");
  pChar += rozofs_string_append(pChar,"// 1      = weigthed round robin\n");
  pChar += rozofs_string_append(pChar,"// 2 or 3 = strict round robin\n");
  COMMON_CONFIG_SHOW_INT_OPT(file_distribution_rule,0,"0:10");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(storio_dscp,46);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// DSCP for exchanges from/to the STORIO.\n");
  COMMON_CONFIG_SHOW_INT_OPT(storio_dscp,46,"0:46");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(export_dscp,34);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// DSCP for exchanges from/to the EXPORTD.\n");
  COMMON_CONFIG_SHOW_INT_OPT(export_dscp,34,"0:34");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  return pChar;
}
/*____________________________________________________________________________________________
**
** export scope configuration parameters
**
*/
char * show_common_config_module_export(char * pChar) {

  pChar += rozofs_string_append_bold(pChar,"#\n");
  pChar += rozofs_string_append_bold(pChar,"# ");
  pChar += rozofs_string_append_bold(pChar,"export");
  pChar += rozofs_string_append_bold(pChar," scope configuration parameters\n");
  pChar += rozofs_string_append_bold(pChar,"#\n\n");

  COMMON_CONFIG_IS_DEFAULT_INT(trashed_file_per_run,1000);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Max number of file that the exportd can remove from storages in a run.\n");
  pChar += rozofs_string_append(pChar,"// A new run occurs every 2 seconds.\n");
  COMMON_CONFIG_SHOW_INT(trashed_file_per_run,1000);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(trash_high_threshold,1000);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// High trash water mark when FID recycling is activated.\n");
  pChar += rozofs_string_append(pChar,"// When the trash has already this number of files, files are no more\n");
  pChar += rozofs_string_append(pChar,"// deleted but recycled.\n");
  COMMON_CONFIG_SHOW_INT_OPT(trash_high_threshold,1000,"0:1000000");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(fid_recycle,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Whether FID recycling feature is activated.\n");
  COMMON_CONFIG_SHOW_BOOL(fid_recycle,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(export_buf_cnt,128);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  COMMON_CONFIG_SHOW_INT_OPT(export_buf_cnt,128,"32:1024");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(export_attr_thread,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// To activate export writebehind attributes thread.\n");
  COMMON_CONFIG_SHOW_BOOL(export_attr_thread,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(export_versioning,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Support of deleted directory/file versioning.\n");
  COMMON_CONFIG_SHOW_BOOL(export_versioning,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(alloc_estimated_mb,1);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Number of MB to account a file for during file distribution phase\n");
  COMMON_CONFIG_SHOW_INT(alloc_estimated_mb,1);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(client_flock_timeout,30);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Delay from which a rozofsmoun client is declared disconnected and its \n");
  pChar += rozofs_string_append(pChar,"// file locks are automatically removed\n");
  COMMON_CONFIG_SHOW_INT_OPT(client_flock_timeout,30,"15:600");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(mproto_timeout,10);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Time out between export and storage for remove and stat\n");
  COMMON_CONFIG_SHOW_INT_OPT(mproto_timeout,10,"1:60");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_STRING(export_temporary_dir,"/tmp");
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Directory to use on the export to build temporary files.\n");
  pChar += rozofs_string_append(pChar,"// Used for instance to build list of files to rebuild.\n");
  COMMON_CONFIG_SHOW_STRING(export_temporary_dir,"/tmp");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(mkdir_ok_instead_of_eexist,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// To activate workaround that make mkdir respond OK instead of EEXIST\n");
  pChar += rozofs_string_append(pChar,"// when the directory is already created \n");
  COMMON_CONFIG_SHOW_BOOL(mkdir_ok_instead_of_eexist,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(mknod_ok_instead_of_eexist,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// To activate workaround that make mknod respond OK instead of EEXIST\n");
  pChar += rozofs_string_append(pChar,"// when the file is already created  \n");
  COMMON_CONFIG_SHOW_BOOL(mknod_ok_instead_of_eexist,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(disable_sync_attributes,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// To disable synchronous write of attributes when set to True\n");
  COMMON_CONFIG_SHOW_BOOL(disable_sync_attributes,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(deletion_delay,30);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Minimum delay between the deletion request and the effective projections deletion\n");
  COMMON_CONFIG_SHOW_INT(deletion_delay,30);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(min_metadata_inodes,262144);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Minimum number of inodes that must be available on metadata device to allow a mknod/mkdir operation\n");
  COMMON_CONFIG_SHOW_INT(min_metadata_inodes,262144);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(min_metadata_MB,2048);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Minimum available size in MB that must be available on metadata device to allow a mknod/mkdir operation\n");
  COMMON_CONFIG_SHOW_INT(min_metadata_MB,2048);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(nb_trash_thread,2);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Number of trash threads that work in parallel\n");
  COMMON_CONFIG_SHOW_INT_OPT(nb_trash_thread,2,"1:8");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(nb_thin_thread,2);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Number of thin provisioning threads that work in parallel\n");
  COMMON_CONFIG_SHOW_INT_OPT(nb_thin_thread,2,"1:4");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(thin_scan_file_per_run,1000);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Max number of files that the exportd can submit to storages to get the number of blocks (thin provisioning) in a run.\n");
  pChar += rozofs_string_append(pChar,"// A new run occurs every 2 seconds.\n");
  COMMON_CONFIG_SHOW_INT(thin_scan_file_per_run,1000);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(thin_lv1_hash_tb_size,10);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Thin provisioning Level 1 hash table size in power of 2 (changing this parameter will take effect on the next export restart) \n");
  COMMON_CONFIG_SHOW_INT_OPT(thin_lv1_hash_tb_size,10,"6:128");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(expthin_guard_delay_sec,10);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Guard delay in seconds between two file scanning of a file that belongs to an exportd configured for thin provisioning\n");
  COMMON_CONFIG_SHOW_INT_OPT(expthin_guard_delay_sec,10,"1:600");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(expdir_guard_delay_sec,10);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Guard delay associated with directory re-write used for tracking children changes within a directory \n");
  COMMON_CONFIG_SHOW_INT_OPT(expdir_guard_delay_sec,10,"1:7200");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(level2_cache_max_entries_kb,512);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Maximum number of entries that the export level 2 cache can contain (unit is KB) \n");
  COMMON_CONFIG_SHOW_INT_OPT(level2_cache_max_entries_kb,512,"1:4096");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  return pChar;
}
/*____________________________________________________________________________________________
**
** client scope configuration parameters
**
*/
char * show_common_config_module_client(char * pChar) {

  pChar += rozofs_string_append_bold(pChar,"#\n");
  pChar += rozofs_string_append_bold(pChar,"# ");
  pChar += rozofs_string_append_bold(pChar,"client");
  pChar += rozofs_string_append_bold(pChar," scope configuration parameters\n");
  pChar += rozofs_string_append_bold(pChar,"#\n\n");

  COMMON_CONFIG_IS_DEFAULT_BOOL(wr_ack_on_inverse,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Whether STORCLI acknowleges write request on inverse or forward STORIO responses.\n");
  COMMON_CONFIG_SHOW_BOOL(wr_ack_on_inverse,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(rozofsmount_fuse_reply_thread,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// To activate rozofsmount reply fuse threads.\n");
  COMMON_CONFIG_SHOW_BOOL(rozofsmount_fuse_reply_thread,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(client_fast_reconnect,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// To activate fast reconnect from client to exportd\n");
  COMMON_CONFIG_SHOW_BOOL(client_fast_reconnect,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(archive_file_delay,10);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// delay is minutes after which a file is considered as an archived file (unit is minute)\n");
  COMMON_CONFIG_SHOW_INT_OPT(archive_file_delay,10,"0:3600");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(archive_file_dentry_timeout,30);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// dentry cache timeout for archive file type (unit is second)\n");
  COMMON_CONFIG_SHOW_INT_OPT(archive_file_dentry_timeout,30,"0:300");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(archive_file_attr_timeout,30);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// attribute cache timeout for archive file type (unit is second)\n");
  COMMON_CONFIG_SHOW_INT_OPT(archive_file_attr_timeout,30,"0:300");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(client_xattr_cache,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// When that flag is asserted, the rozofsmount client can cache the extended attributes\n");
  COMMON_CONFIG_SHOW_BOOL(client_xattr_cache,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(async_setattr,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// When that flag is asserted, the rozofsmount client performs setattr in asynchronous mode\n");
  COMMON_CONFIG_SHOW_BOOL(async_setattr,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(statfs_period,10);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// statfs period in seconds. minimum is 0.\n");
  COMMON_CONFIG_SHOW_INT(statfs_period,10);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  return pChar;
}
/*____________________________________________________________________________________________
**
** storage scope configuration parameters
**
*/
char * show_common_config_module_storage(char * pChar) {

  pChar += rozofs_string_append_bold(pChar,"#\n");
  pChar += rozofs_string_append_bold(pChar,"# ");
  pChar += rozofs_string_append_bold(pChar,"storage");
  pChar += rozofs_string_append_bold(pChar," scope configuration parameters\n");
  pChar += rozofs_string_append_bold(pChar,"#\n\n");

  COMMON_CONFIG_IS_DEFAULT_INT(nb_disk_thread,4);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Number of disk threads in the STORIO.\n");
  COMMON_CONFIG_SHOW_INT_OPT(nb_disk_thread,4,"2:64");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(storio_multiple_mode,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Whether STORIO is in multiple (1 STORIO per cluster) \n");
  pChar += rozofs_string_append(pChar,"// or single mode (only 1 STORIO).\n");
  COMMON_CONFIG_SHOW_BOOL(storio_multiple_mode,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(crc32c_check,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Whether CRC32 MUST be checked by STORIO.\n");
  COMMON_CONFIG_SHOW_BOOL(crc32c_check,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(crc32c_generate,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Whether CRC32 MUST be computed by STORIO.\n");
  COMMON_CONFIG_SHOW_BOOL(crc32c_generate,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(crc32c_hw_forced,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Whether CRC32 MUST be absolutly hardware computed by STORIO.\n");
  COMMON_CONFIG_SHOW_BOOL(crc32c_hw_forced,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(allow_disk_spin_down,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Whether STORIO device monitoring should avoid reading from \n");
  pChar += rozofs_string_append(pChar,"// devices when no access have occured for read or write. This\n");
  pChar += rozofs_string_append(pChar,"// enables disk spin down to occur.\n");
  COMMON_CONFIG_SHOW_BOOL(allow_disk_spin_down,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(disk_usage_threshold,0);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Over which device usage threashold should the STORIO log the event. \n");
  COMMON_CONFIG_SHOW_INT_OPT(disk_usage_threshold,0,"0:100");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(disk_read_threshold,0);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Over which device read delay threashold should the STORIO log the event. \n");
  COMMON_CONFIG_SHOW_INT(disk_read_threshold,0);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(disk_write_threshold,0);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Over which device write delay threashold should the STORIO log the event. \n");
  COMMON_CONFIG_SHOW_INT(disk_write_threshold,0);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(storio_buf_cnt,128);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Number of STORIO receive buffer.\n");
  COMMON_CONFIG_SHOW_INT_OPT(storio_buf_cnt,128,"32:1024");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(recycle_truncate_blocks,0);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Number of block to which the chunk files should be truncated on storage \n");
  pChar += rozofs_string_append(pChar,"// node at the time it is recycled.\n");
  COMMON_CONFIG_SHOW_INT(recycle_truncate_blocks,0);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_STRING(storaged_start_script,"");
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Name of an executable file that the storaged should call at startup\n");
  COMMON_CONFIG_SHOW_STRING(storaged_start_script,"");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(device_automount,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Whether the storage has to automount the devices\n");
  COMMON_CONFIG_SHOW_BOOL(device_automount,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_STRING(device_automount_path,"/srv/rozofs/storages");
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// automount path where the devices should be mounted\n");
  COMMON_CONFIG_SHOW_STRING(device_automount_path,"/srv/rozofs/storages");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_STRING(device_automount_option,"");
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Device mounting options\n");
  COMMON_CONFIG_SHOW_STRING(device_automount_option,"");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_STRING(storage_temporary_dir,"/tmp");
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Directory to use on the storage node to build temporary files.\n");
  pChar += rozofs_string_append(pChar,"// Used for instance by the rebuild process.\n");
  COMMON_CONFIG_SHOW_STRING(storage_temporary_dir,"/tmp");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(device_self_healing_process,8);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// self healing : Paralellism factor for device self healing feature\n");
  pChar += rozofs_string_append(pChar,"// i.e the number of process to run rebuild in //\n");
  COMMON_CONFIG_SHOW_INT_OPT(device_self_healing_process,8,"1:64");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(device_selfhealing_delay,15);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// self healing : Fault duration in minutes before device selfhealing starts\n");
  COMMON_CONFIG_SHOW_INT_OPT(device_selfhealing_delay,15,"0:10000");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(device_selfhealing_read_throughput,20);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// self healing :  throughput limitation in MB/s per rebuild process in //\n");
  pChar += rozofs_string_append(pChar,"// for reading external projections. The writing on disk is only\n");
  pChar += rozofs_string_append(pChar,"// 1/2 of that in layout 0, 1/4 in layout 1...\n");
  pChar += rozofs_string_append(pChar,"// 0 means no limit\n");
  COMMON_CONFIG_SHOW_INT_OPT(device_selfhealing_read_throughput,20,"0:10000");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_STRING(device_selfhealing_mode,"spareOnly");
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// self healing : possible modes\n");
  pChar += rozofs_string_append(pChar,"// spareOnly  only self repair on a spare disk\n");
  pChar += rozofs_string_append(pChar,"// relocate   also repair on remaining disks when no spare available\n");
  COMMON_CONFIG_SHOW_STRING(device_selfhealing_mode,"spareOnly");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_STRING(export_hosts,"");
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Export host names or IP addresses separated with / \n");
  pChar += rozofs_string_append(pChar,"// Required for selfhealing.\n");
  pChar += rozofs_string_append(pChar,"// Required for spare file restoring to its nominal location.\n");
  COMMON_CONFIG_SHOW_STRING(export_hosts,"");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_BOOL(spare_restore_enable,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Spare file restoring : whether the service is active or not\n");
  COMMON_CONFIG_SHOW_BOOL(spare_restore_enable,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(spare_restore_loop_delay,240);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Spare file restoring : how often the process runs  \n");
  COMMON_CONFIG_SHOW_INT(spare_restore_loop_delay,240);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(spare_restore_read_throughput,2);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Spare file restoring : throughput limitation for reading and analyzing spare files in MB/s\n");
  pChar += rozofs_string_append(pChar,"// 0 means no limit\n");
  COMMON_CONFIG_SHOW_INT(spare_restore_read_throughput,2);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(storio_fidctx_ctx,256);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Storio number of FID context in 1K unit\n");
  COMMON_CONFIG_SHOW_INT(storio_fidctx_ctx,256);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  COMMON_CONFIG_IS_DEFAULT_INT(spare_restore_spare_ctx,16);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Spare file restoring : Number of spare file context in 1K unit\n");
  COMMON_CONFIG_SHOW_INT(spare_restore_spare_ctx,16);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  return pChar;
}
/*____________________________________________________________________________________________
**
** common_config diagnostic function
**
*/
void common_config_generated_show(char * argv[], uint32_t tcpRef, void *bufRef) {
char *pChar = uma_dbg_get_buffer();

  if (argv[1] != NULL) {
    if (strcmp(argv[1],"reload")==0) {
      common_config_read(NULL);
    }
    else {
      if (strcmp("global",argv[1])==0) {
        pChar = show_common_config_module_global(pChar);
      }
      else if (strcmp("export",argv[1])==0) {
        pChar = show_common_config_module_export(pChar);
      }
      else if (strcmp("client",argv[1])==0) {
        pChar = show_common_config_module_client(pChar);
      }
      else if (strcmp("storage",argv[1])==0) {
        pChar = show_common_config_module_storage(pChar);
      }
      else {
        pChar += rozofs_string_append(pChar, "Unexpected configuration scope\n");
      }
      uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
      return;
    }
  }
 
  if (common_config_file_is_read==0) {
    pChar += rozofs_string_append(pChar,"Can not read configuration file ");
  }
  pChar += rozofs_string_append(pChar,common_config_file_name);
  pChar += rozofs_eol(pChar);
  pChar += rozofs_eol(pChar);
  pChar = show_common_config_module_global(pChar);
  pChar = show_common_config_module_export(pChar);
  pChar = show_common_config_module_client(pChar);
  pChar = show_common_config_module_storage(pChar);

  uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
  return;
}
/*____________________________________________________________________________________________
**
** Read the configuration file
*/
static inline void common_config_generated_read(char * fname) {
  config_t          cfg; 

  if (common_config_file_is_read == 0) {
    uma_dbg_addTopicAndMan("cconf",show_common_config, man_common_config, 0);
    if (fname == NULL) {
      strcpy(common_config_file_name,ROZOFS_CONFIG_DIR"/rozofs.conf");
    }
    else {
      strcpy(common_config_file_name,fname); 
    } 
  }

  if (access(common_config_file_name,R_OK)!=0) {
    fatal("cant access %s: %s.", common_config_file_name, strerror(errno));
  }

  config_init(&cfg);
  common_config_file_is_read = 1;
  if (config_read_file(&cfg, common_config_file_name) == CONFIG_FALSE) {
    if (errno == ENOENT) {
      info("Missing file %s.", common_config_file_name);
    }
    else {
      severe("cant read %s: %s (line %d).", common_config_file_name, config_error_text(&cfg),config_error_line(&cfg));
    }
    common_config_file_is_read = 0;
  }

  /*
  ** global scope configuration parameters
  */
  // Number of core files that each module is allowed to keep. 
  // Older core files are kept while newest are removed.	 
  COMMON_CONFIG_READ_INT_MINMAX(nb_core_file,1,0,8);
  // Directory where the core files are stored. 
  COMMON_CONFIG_READ_STRING(core_file_directory,"");
  // Enables to take into account the NUMA architecture of the board in  
  // order to collocate some RozoFS modules on the same node for memory 
  // access efficiency. 
  COMMON_CONFIG_READ_BOOL(numa_aware,False);
  // Number of slices in the STORIO. 
  COMMON_CONFIG_READ_INT_MINMAX(storio_slice_number,1024,8,(32*1024));
  // File distribution mode upon cluster, storages and devices. Check rozofs.conf manual. 
  // 0      = size balancing 
  // 1      = weigthed round robin 
  // 2 or 3 = strict round robin 
  COMMON_CONFIG_READ_INT_MINMAX(file_distribution_rule,0,0,10);
  // DSCP for exchanges from/to the STORIO. 
  COMMON_CONFIG_READ_INT_MINMAX(storio_dscp,46,0,46);
  // DSCP for exchanges from/to the EXPORTD. 
  COMMON_CONFIG_READ_INT_MINMAX(export_dscp,34,0,34);
  /*
  ** export scope configuration parameters
  */
  // Max number of file that the exportd can remove from storages in a run. 
  // A new run occurs every 2 seconds. 
  COMMON_CONFIG_READ_INT(trashed_file_per_run,1000);
  // High trash water mark when FID recycling is activated. 
  // When the trash has already this number of files, files are no more 
  // deleted but recycled. 
  COMMON_CONFIG_READ_INT_MINMAX(trash_high_threshold,1000,0,1000000);
  // Whether FID recycling feature is activated. 
  COMMON_CONFIG_READ_BOOL(fid_recycle,False);
  COMMON_CONFIG_READ_INT_MINMAX(export_buf_cnt,128,32,1024);
  // To activate export writebehind attributes thread. 
  COMMON_CONFIG_READ_BOOL(export_attr_thread,True);
  // Support of deleted directory/file versioning. 
  COMMON_CONFIG_READ_BOOL(export_versioning,False);
  // Number of MB to account a file for during file distribution phase 
  COMMON_CONFIG_READ_INT(alloc_estimated_mb,1);
  // Delay from which a rozofsmoun client is declared disconnected and its  
  // file locks are automatically removed 
  COMMON_CONFIG_READ_INT_MINMAX(client_flock_timeout,30,15,600);
  // Time out between export and storage for remove and stat 
  COMMON_CONFIG_READ_INT_MINMAX(mproto_timeout,10,1,60);
  // Directory to use on the export to build temporary files. 
  // Used for instance to build list of files to rebuild. 
  COMMON_CONFIG_READ_STRING(export_temporary_dir,"/tmp");
  // To activate workaround that make mkdir respond OK instead of EEXIST 
  // when the directory is already created  
  COMMON_CONFIG_READ_BOOL(mkdir_ok_instead_of_eexist,False);
  // To activate workaround that make mknod respond OK instead of EEXIST 
  // when the file is already created   
  COMMON_CONFIG_READ_BOOL(mknod_ok_instead_of_eexist,False);
  // To disable synchronous write of attributes when set to True 
  COMMON_CONFIG_READ_BOOL(disable_sync_attributes,False);
  // Minimum delay between the deletion request and the effective projections deletion 
  COMMON_CONFIG_READ_INT(deletion_delay,30);
  // Minimum number of inodes that must be available on metadata device to allow a mknod/mkdir operation 
  COMMON_CONFIG_READ_INT(min_metadata_inodes,262144);
  // Minimum available size in MB that must be available on metadata device to allow a mknod/mkdir operation 
  COMMON_CONFIG_READ_INT(min_metadata_MB,2048);
  // Number of trash threads that work in parallel 
  COMMON_CONFIG_READ_INT_MINMAX(nb_trash_thread,2,1,8);
  // Number of thin provisioning threads that work in parallel 
  COMMON_CONFIG_READ_INT_MINMAX(nb_thin_thread,2,1,4);
  // Max number of files that the exportd can submit to storages to get the number of blocks (thin provisioning) in a run. 
  // A new run occurs every 2 seconds. 
  COMMON_CONFIG_READ_INT(thin_scan_file_per_run,1000);
  // Thin provisioning Level 1 hash table size in power of 2 (changing this parameter will take effect on the next export restart)  
  COMMON_CONFIG_READ_INT_MINMAX(thin_lv1_hash_tb_size,10,6,128);
  // Guard delay in seconds between two file scanning of a file that belongs to an exportd configured for thin provisioning 
  COMMON_CONFIG_READ_INT_MINMAX(expthin_guard_delay_sec,10,1,600);
  // Guard delay associated with directory re-write used for tracking children changes within a directory  
  COMMON_CONFIG_READ_INT_MINMAX(expdir_guard_delay_sec,10,1,7200);
  // Maximum number of entries that the export level 2 cache can contain (unit is KB)  
  COMMON_CONFIG_READ_INT_MINMAX(level2_cache_max_entries_kb,512,1,4096);
  /*
  ** client scope configuration parameters
  */
  // Whether STORCLI acknowleges write request on inverse or forward STORIO responses. 
  COMMON_CONFIG_READ_BOOL(wr_ack_on_inverse,False);
  // To activate rozofsmount reply fuse threads. 
  COMMON_CONFIG_READ_BOOL(rozofsmount_fuse_reply_thread,False);
  // To activate fast reconnect from client to exportd 
  COMMON_CONFIG_READ_BOOL(client_fast_reconnect,False);
  // delay is minutes after which a file is considered as an archived file (unit is minute) 
  COMMON_CONFIG_READ_INT_MINMAX(archive_file_delay,10,0,3600);
  // dentry cache timeout for archive file type (unit is second) 
  COMMON_CONFIG_READ_INT_MINMAX(archive_file_dentry_timeout,30,0,300);
  // attribute cache timeout for archive file type (unit is second) 
  COMMON_CONFIG_READ_INT_MINMAX(archive_file_attr_timeout,30,0,300);
  // When that flag is asserted, the rozofsmount client can cache the extended attributes 
  COMMON_CONFIG_READ_BOOL(client_xattr_cache,False);
  // When that flag is asserted, the rozofsmount client performs setattr in asynchronous mode 
  COMMON_CONFIG_READ_BOOL(async_setattr,False);
  // statfs period in seconds. minimum is 0. 
  COMMON_CONFIG_READ_INT(statfs_period,10);
  /*
  ** storage scope configuration parameters
  */
  // Number of disk threads in the STORIO. 
  COMMON_CONFIG_READ_INT_MINMAX(nb_disk_thread,4,2,64);
  // Whether STORIO is in multiple (1 STORIO per cluster)  
  // or single mode (only 1 STORIO). 
  COMMON_CONFIG_READ_BOOL(storio_multiple_mode,True);
  // Whether CRC32 MUST be checked by STORIO. 
  COMMON_CONFIG_READ_BOOL(crc32c_check,True);
  // Whether CRC32 MUST be computed by STORIO. 
  COMMON_CONFIG_READ_BOOL(crc32c_generate,True);
  // Whether CRC32 MUST be absolutly hardware computed by STORIO. 
  COMMON_CONFIG_READ_BOOL(crc32c_hw_forced,False);
  // Whether STORIO device monitoring should avoid reading from  
  // devices when no access have occured for read or write. This 
  // enables disk spin down to occur. 
  COMMON_CONFIG_READ_BOOL(allow_disk_spin_down,False);
  // Over which device usage threashold should the STORIO log the event.  
  COMMON_CONFIG_READ_INT_MINMAX(disk_usage_threshold,0,0,100);
  // Over which device read delay threashold should the STORIO log the event.  
  COMMON_CONFIG_READ_INT(disk_read_threshold,0);
  // Over which device write delay threashold should the STORIO log the event.  
  COMMON_CONFIG_READ_INT(disk_write_threshold,0);
  // Number of STORIO receive buffer. 
  COMMON_CONFIG_READ_INT_MINMAX(storio_buf_cnt,128,32,1024);
  // Number of block to which the chunk files should be truncated on storage  
  // node at the time it is recycled. 
  COMMON_CONFIG_READ_INT(recycle_truncate_blocks,0);
  // Name of an executable file that the storaged should call at startup 
  COMMON_CONFIG_READ_STRING(storaged_start_script,"");
  // Whether the storage has to automount the devices 
  COMMON_CONFIG_READ_BOOL(device_automount,False);
  // automount path where the devices should be mounted 
  COMMON_CONFIG_READ_STRING(device_automount_path,"/srv/rozofs/storages");
  // Device mounting options 
  COMMON_CONFIG_READ_STRING(device_automount_option,"");
  // Directory to use on the storage node to build temporary files. 
  // Used for instance by the rebuild process. 
  COMMON_CONFIG_READ_STRING(storage_temporary_dir,"/tmp");
  // self healing : Paralellism factor for device self healing feature 
  // i.e the number of process to run rebuild in // 
  COMMON_CONFIG_READ_INT_MINMAX(device_self_healing_process,8,1,64);
  // self healing : Fault duration in minutes before device selfhealing starts 
  COMMON_CONFIG_READ_INT_MINMAX(device_selfhealing_delay,15,0,10000);
  // self healing :  throughput limitation in MB/s per rebuild process in // 
  // for reading external projections. The writing on disk is only 
  // 1/2 of that in layout 0, 1/4 in layout 1... 
  // 0 means no limit 
  COMMON_CONFIG_READ_INT_MINMAX(device_selfhealing_read_throughput,20,0,10000);
  // self healing : possible modes 
  // spareOnly  only self repair on a spare disk 
  // relocate   also repair on remaining disks when no spare available 
  COMMON_CONFIG_READ_STRING(device_selfhealing_mode,"spareOnly");
  // Export host names or IP addresses separated with /  
  // Required for selfhealing. 
  // Required for spare file restoring to its nominal location. 
  COMMON_CONFIG_READ_STRING(export_hosts,"");
  // Spare file restoring : whether the service is active or not 
  COMMON_CONFIG_READ_BOOL(spare_restore_enable,True);
  // Spare file restoring : how often the process runs   
  COMMON_CONFIG_READ_INT(spare_restore_loop_delay,240);
  // Spare file restoring : throughput limitation for reading and analyzing spare files in MB/s 
  // 0 means no limit 
  COMMON_CONFIG_READ_INT(spare_restore_read_throughput,2);
  // Storio number of FID context in 1K unit 
  COMMON_CONFIG_READ_INT(storio_fidctx_ctx,256);
  // Spare file restoring : Number of spare file context in 1K unit 
  COMMON_CONFIG_READ_INT(spare_restore_spare_ctx,16);
 
  config_destroy(&cfg);
}
#endif
