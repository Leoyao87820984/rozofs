/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _GWPROTO_H_RPCGEN
#define _GWPROTO_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#include <rozofs/rozofs.h>
#define GW_NAME_LEN (ROZOFS_HOSTNAME_MAX/4)

typedef char *epgw_host_t;

enum gw_status_e {
	GW_FAILURE = 0,
	GW_SUCCESS = 1,
	GW_NOT_SYNCED = 2,
};
typedef enum gw_status_e gw_status_e;

struct gw_header_t {
	uint32_t export_id;
	uint32_t nb_gateways;
	uint32_t gateway_rank;
	uint32_t configuration_indice;
};
typedef struct gw_header_t gw_header_t;

struct gw_status_t {
	gw_status_e status;
	union {
		int error;
	} gw_status_t_u;
};
typedef struct gw_status_t gw_status_t;

struct gw_invalidate_sections_t {
	gw_header_t hdr;
	struct {
		u_int section_len;
		char *section_val;
	} section;
};
typedef struct gw_invalidate_sections_t gw_invalidate_sections_t;

struct gw_host_conf_t {
	epgw_host_t host;
};
typedef struct gw_host_conf_t gw_host_conf_t;
//  uint32_t           eid[EXPGW_EID_MAX_IDX];  
//  gw_host_conf_t     gateway_host[EXPGW_EXPGW_MAX_IDX];

struct gw_configuration_t {
	gw_header_t hdr;
	epgw_host_t exportd_host;
	uint16_t exportd_port;
	uint16_t gateway_port;
	struct {
		u_int eid_len;
		uint32_t *eid_val;
	} eid;
	struct {
		u_int gateway_host_len;
		gw_host_conf_t *gateway_host_val;
	} gateway_host;
};
typedef struct gw_configuration_t gw_configuration_t;

struct gw_ret_configuration_t {
	gw_status_t ret;
	gw_configuration_t config;
};
typedef struct gw_ret_configuration_t gw_ret_configuration_t;

#define GW_PROGRAM 0x20000009
#define GW_VERSION 1

#if defined(__STDC__) || defined(__cplusplus)
#define GW_NULL 0
extern  void * gw_null_1(void *, CLIENT *);
extern  void * gw_null_1_svc(void *, struct svc_req *);
#define GW_INVALIDATE_SECTIONS 1
extern  gw_status_t * gw_invalidate_sections_1(gw_invalidate_sections_t *, CLIENT *);
extern  gw_status_t * gw_invalidate_sections_1_svc(gw_invalidate_sections_t *, struct svc_req *);
#define GW_INVALIDATE_ALL 2
extern  gw_status_t * gw_invalidate_all_1(gw_header_t *, CLIENT *);
extern  gw_status_t * gw_invalidate_all_1_svc(gw_header_t *, struct svc_req *);
#define GW_CONFIGURATION 3
extern  gw_status_t * gw_configuration_1(gw_configuration_t *, CLIENT *);
extern  gw_status_t * gw_configuration_1_svc(gw_configuration_t *, struct svc_req *);
#define GW_POLL 4
extern  gw_status_t * gw_poll_1(gw_header_t *, CLIENT *);
extern  gw_status_t * gw_poll_1_svc(gw_header_t *, struct svc_req *);
#define GW_GET_CONFIGURATION 5
extern  gw_ret_configuration_t * gw_get_configuration_1(gw_header_t *, CLIENT *);
extern  gw_ret_configuration_t * gw_get_configuration_1_svc(gw_header_t *, struct svc_req *);
extern int gw_program_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define GW_NULL 0
extern  void * gw_null_1();
extern  void * gw_null_1_svc();
#define GW_INVALIDATE_SECTIONS 1
extern  gw_status_t * gw_invalidate_sections_1();
extern  gw_status_t * gw_invalidate_sections_1_svc();
#define GW_INVALIDATE_ALL 2
extern  gw_status_t * gw_invalidate_all_1();
extern  gw_status_t * gw_invalidate_all_1_svc();
#define GW_CONFIGURATION 3
extern  gw_status_t * gw_configuration_1();
extern  gw_status_t * gw_configuration_1_svc();
#define GW_POLL 4
extern  gw_status_t * gw_poll_1();
extern  gw_status_t * gw_poll_1_svc();
#define GW_GET_CONFIGURATION 5
extern  gw_ret_configuration_t * gw_get_configuration_1();
extern  gw_ret_configuration_t * gw_get_configuration_1_svc();
extern int gw_program_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_epgw_host_t (XDR *, epgw_host_t*);
extern  bool_t xdr_gw_status_e (XDR *, gw_status_e*);
extern  bool_t xdr_gw_header_t (XDR *, gw_header_t*);
extern  bool_t xdr_gw_status_t (XDR *, gw_status_t*);
extern  bool_t xdr_gw_invalidate_sections_t (XDR *, gw_invalidate_sections_t*);
extern  bool_t xdr_gw_host_conf_t (XDR *, gw_host_conf_t*);
extern  bool_t xdr_gw_configuration_t (XDR *, gw_configuration_t*);
extern  bool_t xdr_gw_ret_configuration_t (XDR *, gw_ret_configuration_t*);

#else /* K&R C */
extern bool_t xdr_epgw_host_t ();
extern bool_t xdr_gw_status_e ();
extern bool_t xdr_gw_header_t ();
extern bool_t xdr_gw_status_t ();
extern bool_t xdr_gw_invalidate_sections_t ();
extern bool_t xdr_gw_host_conf_t ();
extern bool_t xdr_gw_configuration_t ();
extern bool_t xdr_gw_ret_configuration_t ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_GWPROTO_H_RPCGEN */
