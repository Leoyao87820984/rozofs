#!/bin/sh
#
# rozofs-storaged      This shell script takes care of starting and stopping
#                      the storaged services.
#
#chkconfig: 35 20 80
#description: rozofs storaged server
#processname: storaged

### BEGIN INIT INFO
# Provides:          rozofs-storaged
# Required-Start:    $network $local_fs $remote_fs $portmap
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: RozoFS storaged server
# Description:       RozoFS is a scale-out NAS file system. This service
#                    provides the rozofs-storaged server functionality.
### END INIT INFO


DAEMON=/usr/bin/storaged
NAME=storaged
PIDFILE=/var/run/launcher_${NAME}.pid
LAUNCHER=/usr/bin/rozolauncher

# Source function library.
if [ -f /lib/lsb/init-functions ]; then
    . /lib/lsb/init-functions
    alias START_DAEMON=start_daemon
    alias STATUS=storaged_status
    alias LOG_SUCCESS=log_success_msg
    alias LOG_FAILURE=log_failure_msg
    alias LOG_WARNING=log_warning_msg
elif [ -f /etc/init.d/functions ]; then
    . /etc/init.d/functions
    alias START_DAEMON=daemon
    alias STATUS=status
    alias LOG_SUCCESS=success
    alias LOG_FAILURE=failure
    alias LOG_WARNING=passed
else
    echo "Error: your platform is not supported by $0" > /dev/stderr
    exit 1
fi

do_status () {

    if [ -f $PIDFILE ];
    then 
      exit 0
    fi   
    
    exit 3
}

do_start()
{
    # 1rst check the configuration
    $DAEMON $DAEMON_ARGS -C
    case "$?" in
    
      # Configuration is valid. 
      # Let's run through rozolauncher.
      "0"){
         $LAUNCHER start $PIDFILE $DAEMON $DAEMON_ARGS &
         return 0
      };;
      
      # Configuration is invalid. 
      # Return an error.
      *) {
	 echo "Inconsistant configuration !!!"
	 echo "Check log files."
	 return 3      
      };;
      
    esac    
}

# stop the daemon/service

do_stop()
{
    $LAUNCHER stop $PIDFILE
    return 0
}

case "$1" in
    start|restart|force-reload)
        echo -n "$1 $NAME"
        
        do_start
        res=$?
        case "$res" in
            0|1) LOG_SUCCESS ;;
            *)   LOG_FAILURE ;;
        esac
	exit $res
        ;;
    status) do_status;;
    
    stop)
        echo -n "Stopping $NAME"
        
        do_stop
        res=$?
        case "$res" in
            0|1) LOG_SUCCESS ;;
            2)   LOG_FAILURE ;;
        esac
	exit $res
        ;;
    *)

    LOG_WARNING "Usage: $0 {start|stop|restart|force-reload}" >&2
    exit 3
    ;;
esac

:

