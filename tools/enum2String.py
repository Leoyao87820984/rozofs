#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os.path
import subprocess
import time
import re
import shlex
import datetime
from optparse import OptionParser
from pyparsing import *

def parse_file(enum_name, fname):

  # Read source file name 
  inside = False
  enum=""

  with open (fname, "r") as myfile:
    
    for line in myfile:
      if "typedef" in line and "enum" in line:
        enum   = ""
        inside = True
        continue
        
      if inside:
        if enum_name in line: return enum
        line = line.replace("\n","") 
        line = line.replace("{","") 
        line = line.replace("}","")
        line = line.replace(" ","")
        line = line.split(',')[0] +','
        line = line.split("//")[0]
        enum = enum + line
        if line == "": continue
        
  return None


###############################################
parser = OptionParser()
parser.add_option("-n","--name", action="store",type="string", dest="name", help="Enum name.")
parser.add_option("-f","--file", action="store",type="string", dest="fname", help="File name.")
parser.add_option("-c","--cut", action="store",type="string", dest="cut", help="number of char to remove at the beginning")
parser.add_option("-u","--underscore", action="store_true",default=False, dest="underscore", help="Not to replace underscore with space")

(options, args) = parser.parse_args()

# Check enum name is given
if options.name == None: 
  print "Missing enum name"
  sys.exit(1)	   
enum_name = options.name

# Check number of char to cut at the beginning
if options.cut == None:
  cut = int(0)
else:
  try:
    cut = int(options.cut)  
  except:
    print "Bad cut value"
    sys.exit(1)	   
     
# Check source file name is given
if options.fname == None:
  print "Missing source file name"
  sys.exit(1)	   

# Check source file name exists  
if not os.path.exists(options.fname):
  print "%s file does not exist"%(options.fname)
  sys.exit(1)	   
   
# Read source file name 
enum = parse_file(enum_name,options.fname)
if enum == None:
  print "No such enum in file"
  sys.exit(1)	   


#print enum

# Save stdout and replace it with the output file  
save_stdout = sys.stdout
sys.stdout = open("%s2String.h"%(enum_name),"w")


print "#ifndef __%s2String_h__"%(enum_name)
print "#define __%s2String_h__"%(enum_name) 

print "#ifdef __cplusplus"
print "extern \"C\" {"
print "#endif /*__cplusplus*/"


print "\n/*___________________________________________________________________"
print " "
print "   Generated by enum2String.py "
print "   Date : %s"%(datetime.datetime.now().strftime("%A %Y %B %d, %H:%M:%S"))
print "   Command line : "
# Print command
cmd=""
for param in sys.argv:
  cmd = cmd + " " + param
print cmd
  
  
print "\n ____________________________________________________________________"
print " */"
#print "#include \"%s\""%(options.fname)
print "\n/*_________________________________________________________________"
print " * Builds a string from an integer value supposed to be within"
print " * the enumerated list %s"%(enum_name) 
print " *"  
print " * @param x : value from %s to translate into a string"%(enum_name) 
print " *"
print " * The input value is translated into a string deduced from the enum"
print " * definition. When the input value do not fit any of the predefined"
print " * values, \"??\" is returned" 
print " *"
print " * @return A char pointer to the constant string or \"??\""
print " *_________________________________________________________________*/ "   
print "static inline char * %s2String (%s x) {\n"%(enum_name,enum_name) 
print "  switch(x) {"

for value in enum.split(','):

  val_name = value.split("=")[0]
  val_name = val_name.replace(" ","")
  
  if val_name == "": continue
  
  val_display = val_name[cut:]   
  if options.underscore == False: val_display = val_display.replace("_", " ")
    
  print "    case %-40s: return(\"%s\");"%(val_name,val_display)  

print "    /* Unexpected value */";
print "    default: return \"??\";"
print "  }";
print "}";
print "#ifdef	__cplusplus";
print "}";
print "#endif";
print "#endif\n";

# Restore stdout
sys.stdout.close()
sys.stdout = save_stdout

print "result is %s2String.h"%(enum_name)
