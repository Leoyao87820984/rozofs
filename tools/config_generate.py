#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os.path
import subprocess
import time
import re
import shlex
import datetime
from optparse import OptionParser

import sys
  
objects = []
modules = []
  
#_______________________________________________
class conf_obj:

  def __init__(self,name,module,genre,default,comment,minmax=None):

    self.name     = name
    self.module   = module
    self.genre    = genre
    self.default  = default
    self.mini=None
    self.maxi=None
    self.comment = comment

    if minmax != None:
      try:
        self.mini=minmax.split(':')[0]
	self.maxi=minmax.split(':')[1]
      except:
        print "%s %s bad min:max \"%s\""%(genre,name,minmax)
        raise ValueError()    


    if module not in modules: modules.append(module)
   
    objects.append(self)

#    print "%s is %s in %s"%(name,genre,module)

  def write_in_struct(self):

    for comment in self.comment:  print "  %s"%(comment) 
     
    if self.genre == "STRING":
      print "  char *      %s;"%(self.name) 
    elif self.genre == "LONG":
      print "  int64_t     %s;"%(self.name)
    else:
      print "  int32_t     %s;"%(self.name)

  def write_in_show(self,struct_name):  
    print ""
    print "  %s_IS_DEFAULT_%s(%s,%s);"%(struct_name.upper(),self.genre,self.name,self.default) 
    print "  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);"        
    for comment in self.comment: print "  pChar += rozofs_string_append(pChar,\"%s\\n\");"%(comment)
    if self.mini != None:
      print "  %s_SHOW_%s_OPT(%s,%s,\"%s:%s\");"%(struct_name.upper(),self.genre,self.name,self.default,self.mini,self.maxi) 
    else:
      print "  %s_SHOW_%s(%s,%s);"%(struct_name.upper(),self.genre,self.name,self.default) 
    print "  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);"        
              
  def read(self,struct_name):
    for comment in self.comment: print "  %s "%(comment)
    if self.mini == None:
      print "  %s_READ_%s(%s,%s);"%(struct_name.upper(),self.genre,self.name,self.default)       
    else:
      print "  %s_READ_%s_MINMAX(%s,%s,%s,%s);"%(struct_name.upper(),self.genre,self.name,self.default,self.mini,self.maxi)                

#_______________________________________________
class conf_int(conf_obj):

  def __init__(self,name,module,default,comment,minmax=None):
    try: int(default)
    except:
      print "INT %s has not an integer default value \"%s\""%(name,default)
      raise ValueError()
    conf_obj.__init__(self,name,module,"INT",default,comment,minmax)

#_______________________________________________
class conf_long(conf_obj):

  def __init__(self,name,module,default,comment,minmax=None):
    try: int(default)
    except:
      print "LONG %s has not an integer default value \"%s\""%(name,default)
      raise ValueError()
    conf_obj.__init__(self,name,module,"LONG",default,comment,minmax)

#_______________________________________________
class conf_string(conf_obj):

  def __init__(self,name,module,default,comment):
    conf_obj.__init__(self,name,module,"STRING",default,comment)

#_______________________________________________
class conf_bool(conf_obj):

  def __init__(self,name,module,default,comment):
    try: bool(default)
    except:
      print "BOOL %s has not a boolean default value \"%s\""%(name,default)
      raise ValueError()
    conf_obj.__init__(self,name,module,"BOOL",default,comment)    
#_______________________________________________
def start_header_file(name,struct_name):
  global save_stdout
  
  save_stdout = sys.stdout
  sys.stdout = open("%s.h"%(name),"w")


  print "/*"
  print ""  
  print " File generated by ../../tools/%s.py from %s.input"%(struct_name,struct_name)
  print ""
  print " Copyright (c) 2010 Fizians SAS. <http://www.fizians.com>"
  print " This file is part of Rozofs."
  print ""
  print " Rozofs is free software; you can redistribute it and/or modify"
  print " it under the terms of the GNU General Public License as published"
  print " by the Free Software Foundation, version 2."
  print ""
  print " Rozofs is distributed in the hope that it will be useful, but"
  print " WITHOUT ANY WARRANTY; without even the implied warranty of"
  print " MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU"
  print " General Public License for more details."
  print ""
  print " You should have received a copy of the GNU General Public License"
  print " along with this program.  If not, see"
  print " <http://www.gnu.org/licenses/>."
  print " */"
  print "#ifndef _%s_H"%(name.upper())
  print "#define _%s_H"%(name.upper())
  print ""
  print "#include <stdint.h>"
  print "#include <string.h>"
  print "#include <errno.h>"
  print "#include <libconfig.h>"
  print "#include <unistd.h>"
  print "#include <inttypes.h>"
  print "#include <sys/types.h>"

#_______________________________________________
def end_file(struct_name):
  global save_stdout
  
  print "#endif"
  sys.stdout.close()
  sys.stdout = save_stdout    


#_______________________________________________
def go_read_file(struct_name):
  comment =  []
  
  if not os.path.exists(struct_name):
    print "Missing file %s"%(struct_name)
    sys.exit(1)
    
  with open(struct_name,"r") as finput:
  
    for line in finput:
 
      if len(line.split()) == 0: continue
      if line[0] == '#': continue         

      try:
        if line[0] == '/' and line[1] == '/':
	  genre = "//"
	else:
	  genre=line.split()[0]  
      except: 
        genre=line.split()[0]
      	
      if genre == "//": 
        comment.append(line[:-1])
	continue
	
      module=line.split()[1]
      name=line.split()[2]
      if genre != "STRING": 
        default=line.split()[3]
      else:
        default='"'+line.split('"')[1]+'"'
	
      if genre == "INT":
        if len(line.split()) == 5:
	  obj = conf_int(name,module,default,comment,line.split()[4])
	else:
	  obj = conf_int(name,module,default,comment)  
          
      elif genre == "LONG":
        if len(line.split()) == 5:
	  obj = conf_long(name,module,default,comment,line.split()[4])
	else:
	  obj = conf_long(name,module,default,comment)  
                  
      elif genre == "BOOL":
        obj = conf_bool(name,module,default,comment)
        
      elif genre == "STRING": 
        obj = conf_string(name,module,default,comment)
        
      else:
        print "Unknown type %s for %s"%(genre,name)	
      comment =  []	
#_______________________________________________
def go_build_macros(struct_name):

  print "#define %s_SHOW_NAME(val) {\\"%(struct_name.upper())
  print "  if (isDefaultValue) {\\"  
  print "    pChar += rozofs_string_append(pChar,\"// \");\\"
  print "  } else {\\"
  print "    pChar += rozofs_string_append(pChar,\"   \");\\"  
  print "  }\\"
  print "  pChar += rozofs_string_padded_append(pChar, 50, rozofs_left_alignment, #val);\\"
  print "  pChar += rozofs_string_append(pChar, \" = \");\\"
  print "}"
  print ""

  print "#define  %s_SHOW_NEXT \\"%(struct_name.upper())
  print "  pChar += rozofs_eol(pChar);\\"
  print "  pChar += rozofs_eol(pChar);"
  print ""
  
  print "#define  %s_SHOW_END \\"%(struct_name.upper())
  print "  *pChar++ = ';';\\"
  print "  %s_SHOW_NEXT"%(struct_name.upper())
  print ""
  
  print "#define  %s_SHOW_END_OPT(opt) \\"%(struct_name.upper())
  print "  pChar += rozofs_string_append(pChar,\"; \\t// \");\\"
  print "  pChar += rozofs_string_append(pChar,opt);\\"
  print "  %s_SHOW_NEXT"%(struct_name.upper())
  print ""
  
  print "#define %s_IS_DEFAULT_BOOL(val,def) \\"%(struct_name.upper())
  print "  isDefaultValue = 0;\\"
  print "  if (((%s.val)&&(strcmp(#def,\"True\")==0)) \\"%(struct_name)
  print "  ||  ((!%s.val)&&(strcmp(#def,\"False\")==0))) \\"%(struct_name)
  print "    isDefaultValue = 1;"
  print ""  
  
  print "#define %s_SHOW_BOOL(val,def)  {\\"%(struct_name.upper())
  print "  %s_SHOW_NAME(val)\\"%(struct_name.upper())
  print "  if (%s.val) pChar += rozofs_string_append(pChar, \"True\");\\"%(struct_name)
  print "  else        pChar += rozofs_string_append(pChar, \"False\");\\"
  print "  %s_SHOW_END\\"%(struct_name.upper())
  print "}"
  print "" 
   
  print "#define %s_IS_DEFAULT_STRING(val,def) \\"%(struct_name.upper())
  print "  isDefaultValue = 0; \\"
  print "  if (strcmp(%s.val,def)==0) isDefaultValue = 1;"%(struct_name)
  print ""  
    
  print "#define %s_SHOW_STRING(val,def)  {\\"%(struct_name.upper())
  print "  %s_SHOW_NAME(val)\\"%(struct_name.upper())
  print "  *pChar++ = '\\\"';\\"
  print "  if (%s.val!=NULL) pChar += rozofs_string_append(pChar, %s.val);\\"%(struct_name,struct_name)
  print "  *pChar++ = '\\\"';\\"
  print "  %s_SHOW_END\\"%(struct_name.upper())
  print "}"
  print ""  

  print "#define %s_IS_DEFAULT_INT(val,def) \\"%(struct_name.upper())
  print "  isDefaultValue = 0; \\"
  print "  if (%s.val == def) isDefaultValue = 1;"%(struct_name)
  print "" 
    
  print "#define %s_SHOW_INT(val,def)  {\\"%(struct_name.upper())
  print "  %s_SHOW_NAME(val)\\"%(struct_name.upper())
  print "  pChar += rozofs_i32_append(pChar, %s.val);\\"%(struct_name)
  print "  %s_SHOW_END\\"%(struct_name.upper())
  print "}"  
  print "" 

  print "#define %s_IS_DEFAULT_INT_OPT(val,def)  %s_IS_DEFAULT_INT(val,def)"%(struct_name.upper(),struct_name.upper())

  print "#define %s_SHOW_INT_OPT(val,def,opt)  {\\"%(struct_name.upper())
  print "  %s_SHOW_NAME(val)\\"%(struct_name.upper())
  print "  pChar += rozofs_i32_append(pChar, %s.val);\\"%(struct_name)
  print "  %s_SHOW_END_OPT(opt)\\"%(struct_name.upper())
  print "}"  
  print ""  

  print "#define %s_IS_DEFAULT_LONG(val,def)  %s_IS_DEFAULT_INT(val,def)"%(struct_name.upper(),struct_name.upper())
    
  print "#define %s_SHOW_LONG(val,def)  {\\"%(struct_name.upper())
  print "  %s_SHOW_NAME(val)\\"%(struct_name.upper())
  print "  pChar += rozofs_i64_append(pChar, %s.val);\\"%(struct_name)
  print "  %s_SHOW_END\\"%(struct_name.upper())
  print "}"  
  print "" 
  
  print "#define %s_IS_DEFAULT_LONG_OPT(val,def)  %s_IS_DEFAULT_INT(val,def)"%(struct_name.upper(),struct_name.upper())

  print "#define %s_SHOW_LONG_OPT(val,def,opt)  {\\"%(struct_name.upper())
  print "  %s_SHOW_NAME(val)\\"%(struct_name.upper())
  print "  pChar += rozofs_i64_append(pChar, %s.val);\\"%(struct_name)
  print "  %s_SHOW_END_OPT(opt)\\"%(struct_name.upper())
  print "}"  
  print ""  

  print "static int  boolval;"  
  print "#define %s_READ_BOOL(val,def)  {\\"%(struct_name.upper())
  print "  if (strcmp(#def,\"True\")==0) {\\"
  print "    %s.val = 1;\\"%(struct_name)
  print "  } else {\\"
  print "    %s.val = 0;\\"%(struct_name)
  print "  }\\"
  print "  if (config_lookup_bool(&cfg, #val, &boolval)) { \\"
  print "    %s.val = boolval;\\"%(struct_name)
  print "  }\\"
  print "}"
  print ""  
  print "#if (((LIBCONFIG_VER_MAJOR == 1) && (LIBCONFIG_VER_MINOR >= 4)) \\"
  print "             || (LIBCONFIG_VER_MAJOR > 1))"
  print "static int               intval;"
  print "#else"
  print "static long int          intval;"
  print "#endif"
  print ""  
  print "#define %s_READ_INT_MINMAX(val,def,mini,maxi)  {\\"%(struct_name.upper())
  print "  %s.val = def;\\"%(struct_name)
  print "  if (config_lookup_int(&cfg, #val, &intval)) { \\"
  print "    if (intval<mini) {\\"
  print "      %s.val = mini;\\"%(struct_name)
  print "    }\\"
  print "    else if (intval>maxi) { \\"
  print "      %s.val = maxi;\\"%(struct_name)
  print "    }\\"
  print "    else {\\"
  print "      %s.val = intval;\\"%(struct_name)
  print "    }\\"
  print "  }\\"
  print "}"
  print ""  
     
  print "#define %s_READ_INT(val,def) {\\"%(struct_name.upper())
  print "  %s.val = def;\\"%(struct_name)
  print "  if (config_lookup_int(&cfg, #val, &intval)) { \\"
  print "    %s.val = intval;\\"%(struct_name)
  print "  }\\"
  print "}" 
  print ""  
     
  print "#define %s_READ_LONG(val,def) {\\"%(struct_name.upper())
  print "static long long         longval;\\"
  print "  %s.val = def;\\"%(struct_name)
  print "  if (config_lookup_int64(&cfg, #val, &longval)) { \\"
  print "    %s.val = longval;\\"%(struct_name)
  print "  }\\"
  print "}" 
  print ""  
  print ""  
  print "#define %s_READ_LONG_MINMAX(val,def,mini,maxi)  {\\"%(struct_name.upper())
  print "static long long         longval;\\"
  print "  %s.val = def;\\"%(struct_name)
  print "  if (config_lookup_int64(&cfg, #val, &longval)) { \\"
  print "    if (longval<mini) {\\"
  print "      %s.val = mini;\\"%(struct_name)
  print "    }\\"
  print "    else if (longval>maxi) { \\"
  print "      %s.val = maxi;\\"%(struct_name)
  print "    }\\"
  print "    else {\\"
  print "      %s.val = longval;\\"%(struct_name)
  print "    }\\"
  print "  }\\"
  print "}"
  print ""  

  print "static const char * charval;"
  print "#define %s_READ_STRING(val,def)  {\\"%(struct_name.upper())
  print "  if (%s.val) free(%s.val);\\"%(struct_name,struct_name)
  print "  if (config_lookup_string(&cfg, #val, &charval)) {\\"
  print "    %s.val = strdup(charval);\\"%(struct_name)
  print "  } else {\\"
  print "    %s.val = strdup(def);\\"%(struct_name)
  print "  }\\"
  print "}" 
  print ""
#_______________________________________________
def go_build_cfile(struct_name):
  global save_stdout
  
  save_stdout = sys.stdout
  sys.stdout = open("%s.c"%(struct_name),"w")

  print "/*"
  print " Copyright (c) 2010 Fizians SAS. <http://www.fizians.com>"
  print " This file is part of Rozofs."
  print ""
  print " Rozofs is free software; you can redistribute it and/or modify"
  print " it under the terms of the GNU General Public License as published"
  print " by the Free Software Foundation, version 2."
  print ""
  print " Rozofs is distributed in the hope that it will be useful, but"
  print " WITHOUT ANY WARRANTY; without even the implied warranty of"
  print " MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU"
  print " General Public License for more details."
  print ""
  print " You should have received a copy of the GNU General Public License"
  print " along with this program.  If not, see"
  print " <http://www.gnu.org/licenses/>."
  print " */"
  print ""
  print "#include \"config.h\""
  print "#include \"%s.h\""%(struct_name)
  print "#include <rozofs/core/uma_dbg_api.h>"
  print "#include <rozofs/rozofs.h>"
  print "#include <rozofs/common/log.h>"
  print ""
  print ""
  print "static char %s_file_name[256] = {0};"%(struct_name)
  print "static int  %s_file_is_read=0;"%(struct_name)
  print "%s_t %s;"%(struct_name,struct_name)
  print ""
  print "void show_%s(char * argv[], uint32_t tcpRef, void *bufRef);"%(struct_name)
  print "void %s_read(char * fname) ;"%(struct_name)
  print ""
  print ""
  print "static int isDefaultValue;" 
  
  go_build_macros(struct_name)
    
  print ""
  print "#include \"%s_read_show.h\""%(struct_name)
  print "void %s_extra_checks(void);"%(struct_name)
  print ""
  print "void show_%s(char * argv[], uint32_t tcpRef, void *bufRef) {"%(struct_name)
  print "  %s_generated_show(argv,tcpRef,bufRef);"%(struct_name)
  print "}"
  print ""
  print "void %s_read(char * fname) {"%(struct_name)
  print "  %s_generated_read(fname);"%(struct_name)
  
  # Look for extra checks added when reading the conf
  if os.path.exists("%s_extra_checks.c"%(struct_name)):
    print ""
    print "  /*"
    print "  ** Add some consistency checks"
    print "  */"
    print "  %s_extra_checks();"%(struct_name)
  
  print "}"
    
  sys.stdout.close()
  sys.stdout = save_stdout 
  
#_______________________________________________
def go_build_struct(struct_name):
  print "void %s_read(char * fname);"%(struct_name)
  print ""
  
                   
  print "typedef struct _%s_t {"%(struct_name)
  for module in modules:
    print ""  
    print "  /*"
    print "  ** %s scope configuration parameters"%(module)
    print "  */"
    print ""
    for obj in objects:
      if obj.module == module:     
        obj.write_in_struct()    
  print "} %s_t;\n"%(struct_name)
  
  print "extern %s_t %s;"%(struct_name,struct_name)
  #print "extern int             config_file_is_read;"
  #print "extern char            config_file_name[];"  

#_______________________________________________
def go_build_man(struct_name,command): 
  print "/*____________________________________________________________________________________________"
  print "**"
  print "** %s man function"%(struct_name)
  print "**"
  print "*/"
  print "void man_%s(char * pChar) {"%(struct_name)
  print "  pChar += rozofs_string_append_underscore(pChar,\"\\nUsage:\\n\");"
  print "  pChar += rozofs_string_append_bold(pChar,\"\\t%s\");"%(command)
  print "  pChar += rozofs_string_append     (pChar,\"\\t\\tdisplays the whole %s configuration.\\n\");"%(struct_name)
  print "  pChar += rozofs_string_append_bold(pChar,\"\\t%s <scope>\");"%(command)
  print "  pChar += rozofs_string_append     (pChar,\"\\tdisplays only the <scope> configuration part.\\n\");"
  print "  pChar += rozofs_string_append_bold(pChar,\"\\t%s reload\");"%(command)
  print "  pChar += rozofs_string_append     (pChar,\"\\treloads and then displays the configuration.\\n\");"
  print "}"

#_______________________________________________
def build_show_module(module,struct_name): 
  print "/*____________________________________________________________________________________________"
  print "**"
  print "** %s scope configuration parameters"%(module)
  print "**"
  print "*/"
  print "char * show_%s_module_%s(char * pChar) {"%(struct_name,module)
  print ""
  print "  pChar += rozofs_string_append_bold(pChar,\"#\\n\");"    
  print "  pChar += rozofs_string_append_bold(pChar,\"# \");"
  print "  pChar += rozofs_string_append_bold(pChar,\"%s\");"%(module)
  print "  pChar += rozofs_string_append_bold(pChar,\" scope configuration parameters\\n\");"   
  print "  pChar += rozofs_string_append_bold(pChar,\"#\\n\\n\");"    
  for obj in objects:
    if obj.module == module:     
      obj.write_in_show(struct_name) 
  print "  return pChar;"
  print "}"
#_______________________________________________
def go_build_show(struct_name): 

  for module in modules:
    build_show_module(module,struct_name)

  print "/*____________________________________________________________________________________________"
  print "**"
  print "** %s diagnostic function"%(struct_name)
  print "**"
  print "*/"
  print "void %s_generated_show(char * argv[], uint32_t tcpRef, void *bufRef) {"%(struct_name)
  print "char *pChar = uma_dbg_get_buffer();"
  print ""
  print "  if (argv[1] != NULL) {"
  print "    if (strcmp(argv[1],\"reload\")==0) {"  
  print "      %s_read(NULL);"%(struct_name)
  print "    }"
  print "    else {"
  first=True
  for module in modules:
    if first == True:
      print "      if (strcmp(\"%s\",argv[1])==0) {"%(module)
      first=False
    else:
      print "      else if (strcmp(\"%s\",argv[1])==0) {"%(module)
    print "        pChar = show_%s_module_%s(pChar);"%(struct_name,module)
    print "      }"
  print "      else {"
  print "        pChar += rozofs_string_append(pChar, \"Unexpected configuration scope\\n\");"
  print "      }"
  print "      uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());"
  print "      return;"           
  print "    }"  
  print "  }"
  print " "   
  print "  if (%s_file_is_read==0) {"%(struct_name)
  print "    pChar += rozofs_string_append(pChar,\"Can not read configuration file \");"    
  print "  }"
  print "  pChar += rozofs_string_append(pChar,%s_file_name);"%(struct_name)
  print "  pChar += rozofs_eol(pChar);"
  print "  pChar += rozofs_eol(pChar);"

  for module in modules:
    print "  pChar = show_%s_module_%s(pChar);"%(struct_name,module)
	   
  print "" 
  print "  uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());"
  print "  return;"     
  print "}"

#_______________________________________________
def go_build_read(file_name,struct_name,command):   
  print "/*____________________________________________________________________________________________"
  print "**"
  print "** Read the configuration file"
  print "*/"
  print "static inline void %s_generated_read(char * fname) {"%(struct_name)
  print "  config_t          cfg; "
  print ""
  print "  if (%s_file_is_read == 0) {"%(struct_name)
  print "    uma_dbg_addTopicAndMan(\"%s\",show_%s, man_%s, 0);"%(command,struct_name,struct_name)
  print "    if (fname == NULL) {"
  print "      strcpy(%s_file_name,ROZOFS_CONFIG_DIR\"/%s\");"%(struct_name,file_name)
  print "    }"
  print "    else {"
  print "      strcpy(%s_file_name,fname); "%(struct_name)
  print "    } "
  print "  }"
  print ""
  print "  if (access(%s_file_name,R_OK)!=0) {"%(struct_name)
  print "    fatal(\"cant access %%s: %%s.\", %s_file_name, strerror(errno));"%(struct_name)
  print "  }"
  print ""     
  print "  config_init(&cfg);"
  print "  %s_file_is_read = 1;"%(struct_name)
  print "  if (config_read_file(&cfg, %s_file_name) == CONFIG_FALSE) {"%(struct_name)
  print "    if (errno == ENOENT) {"
  print "      info(\"Missing file %%s.\", %s_file_name);"%(struct_name)
  print "    }"
  print "    else {"
  print "      severe(\"cant read %%s: %%s (line %%d).\", %s_file_name, config_error_text(&cfg),config_error_line(&cfg));"%(struct_name)
  print "    }"	    
  print "    %s_file_is_read = 0;"%(struct_name)	    
  print "  }"
  print ""


  for module in modules:
    print "  /*"
    print "  ** %s scope configuration parameters"%(module)
    print "  */"
    for obj in objects:
      if obj.module == module:     
        obj.read(struct_name) 

  print " "
  print "  config_destroy(&cfg);"
  print "}" 
  

#_______________________________________________
#
# Generate read, show and rozodiag functions for a configuration file
#
# @param file_name   the name of the configuration fine
#                    under /etc/rozof or /usr/local/etc/rozofs
# @param struct_name the name of the global variable
# @param cli_name    the name of the CLI
#
# ex: file_name    rozofs.conf
#     struct_name  common_config
#     cli_name     cconf
#
def config_generate(file_name,struct_name,cli_name):

  go_read_file("%s.input"%(struct_name))

  # Generate structure header file
  start_header_file(struct_name,struct_name)
  go_build_struct(struct_name)
  end_file(struct_name) 

  # Generate read and show function
  start_header_file("%s_read_show"%(struct_name),struct_name)
  go_build_man(struct_name,cli_name)
  go_build_show(struct_name)
  go_build_read(file_name,struct_name,cli_name)
  end_file(struct_name)
  
  # Generate C file
  go_build_cfile(struct_name)
  go_build_cfile

