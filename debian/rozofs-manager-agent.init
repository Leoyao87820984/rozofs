#!/bin/sh
### BEGIN INIT INFO
# Provides:          rozofs-manager-agent
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: <Enter a short description of the sortware>
# Description:       <Enter a long description of the software>
#                    <...>
#                    <...>
### END INIT INFO

# Author: Fizians S.A.S. <devel@rozofs.com>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=rozo                   # Introduce a short description here
NAME=rozofs-manager-agent   # Introduce the short server's name here
DAEMON=/usr/bin/rozo        # Introduce the server's location here
DAEMON_ARGS=""              # Arguments to run the daemon with
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Default values
AGENTS=auto
PACEMAKER=auto

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

if echo "$AGENTS" | grep -q 'auto' ; then
    AGENTS_auto=''
    for agent in exportd storaged rozofsmount; do
        if [ -x "/usr/bin/$agent" ] ; then
            AGENTS_auto="$AGENTS_auto $agent"
        fi
    done
    AGENTS=$(echo $AGENTS | sed "s/auto/$AGENTS_auto/")
fi

if [ "$PACEMAKER" = 'auto' ] ; then
    if [ -x /usr/sbin/pacemakerd ] ; then
        PACEMAKER=true
    else
        PACEMAKER=false
    fi
fi


# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started or was already running
    #   1 if daemon could not be started
    #start-stop-daemon -S -q -o -p $PIDFILE -n $NAME -a $DAEMON -- $DAEMON_ARGS
    if [ "$PACEMAKER" = 'yes' ] ; then
      $DAEMON agent-start -p $AGENTS
    else
      $DAEMON agent-start $AGENTS
    fi
    return $?
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon could not be stopped
    #start-stop-daemon -K -q -o -p $PIDFILE -n $NAME -R TERM/30/KILL/5 -a $DAEMON
    #RETVAL="$?"
    # Many daemons don't delete their pidfiles when they exit.
    #rm -f $PIDFILE
    #return "$RETVAL"
    $DAEMON agent-stop
    return $?
}

#
# Function that sends a SIGHUP to the daemon/service
#
#do_reload() {
#    start-stop-daemon -K -q -o -s HUP -p $PIDFILE -n $NAME
#    return 0
#}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
    do_start
    case "$?" in
        0) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        1) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
  ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        1) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
       #status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       $DAEMON agent-status
       return $?
       ;;
  #reload)
    #
    # If do_reload() is not implemented then leave this commented out
    # and leave 'force-reload' as an alias for 'restart'.
    #
    #log_daemon_msg "Reloading $DESC" "$NAME"
    #do_reload
    #log_end_msg $?
  #  ;;
  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
    exit 3
    ;;
esac

:
