/*

 File generated by ../../tools/rebalance_config.py from rebalance_config.input

 Copyright (c) 2010 Fizians SAS. <http://www.fizians.com>
 This file is part of Rozofs.

 Rozofs is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published
 by the Free Software Foundation, version 2.

 Rozofs is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see
 <http://www.gnu.org/licenses/>.
 */
#ifndef _REBALANCE_CONFIG_READ_SHOW_H
#define _REBALANCE_CONFIG_READ_SHOW_H

#include <stdint.h>
#include <string.h>
#include <errno.h>
#include <libconfig.h>
#include <unistd.h>
#include <inttypes.h>
#include <sys/types.h>
/*____________________________________________________________________________________________
**
** rebalance_config man function
**
*/
void man_rebalance_config(char * pChar) {
  pChar += rozofs_string_append(pChar,"rebalanceconf is related to the rebalance_config configuration.\n");
  pChar += rozofs_string_append(pChar,"rebalanceconf            displays the whole configuration.\n");
  pChar += rozofs_string_append(pChar,"rebalanceconf <scope>    displays only the <scope> configuration part.\n");
  pChar += rozofs_string_append(pChar,"rebalanceconf reload     reloads and then displays the configuration.\n");
}
/*____________________________________________________________________________________________
**
** global scope configuration parameters
**
*/
char * show_rebalance_config_module_global(char * pChar) {

  pChar += rozofs_string_append(pChar,"#\n");
  pChar += rozofs_string_append(pChar,"# global scope configuration parameters\n");
  pChar += rozofs_string_append(pChar,"#\n\n");
  pChar += rozofs_string_append(pChar,"// This parameter defines the threshold in percentage around the average \n");
  pChar += rozofs_string_append(pChar,"// storage occupancy to which the balancing applies. Typically, the balancing \n");
  pChar += rozofs_string_append(pChar,"// stops when all the storages (sid) are included in the window defined by that \n");
  pChar += rozofs_string_append(pChar,"// threshold. \n");
  pChar += rozofs_string_append(pChar,"// See the -t parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_INT_OPT(free_avg_tolerance,10,"0:100");
  pChar += rozofs_string_append(pChar,"// This parameter defines the free space threshold in percentage before \n");
  pChar += rozofs_string_append(pChar,"// triggering a storage balancing. If the free available space on sid is higher \n");
  pChar += rozofs_string_append(pChar,"// than that threshold, the balancing process stops. \n");
  pChar += rozofs_string_append(pChar,"// See the -a parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_INT_OPT(free_low_threshold,40,"0:100");
  pChar += rozofs_string_append(pChar,"// This option defines the scanning frequency in seconds of the storage balancing \n");
  pChar += rozofs_string_append(pChar,"// process.\n");
  pChar += rozofs_string_append(pChar,"// See the --frequency parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_INT(frequency,30);
  pChar += rozofs_string_append(pChar,"// Exclude files that are more recent than the specified delay. \n");
  pChar += rozofs_string_append(pChar,"// The delay is defined in minutes.\n");
  pChar += rozofs_string_append(pChar,"// See the --olderm parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_LONG(older,-1);
  pChar += rozofs_string_append(pChar,"// Exclude files that are older than the specified delay. \n");
  pChar += rozofs_string_append(pChar,"// The delay is defined in minutes.\n");
  pChar += rozofs_string_append(pChar,"// See the --newerm parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_LONG(newer,-1);
  pChar += rozofs_string_append(pChar,"// That option defines the file count threshold before triggering\n");
  pChar += rozofs_string_append(pChar,"// an effective file move \n");
  pChar += rozofs_string_append(pChar,"// See the --movecnt parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_INT(movecnt,10);
  pChar += rozofs_string_append(pChar,"// That option defines the file count threshold before triggering\n");
  pChar += rozofs_string_append(pChar,"// an effective file move \n");
  pChar += rozofs_string_append(pChar,"// See the --movesz parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_STRING(movesz,"1G");
  pChar += rozofs_string_append(pChar,"// That option defines the maximun bandwidth in MB/s allocated to\n");
  pChar += rozofs_string_append(pChar,"// the file mover.\n");
  pChar += rozofs_string_append(pChar,"// See the --throughput parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_INT(throughput,10);
  pChar += rozofs_string_append(pChar,"// That option indicates the access mode used by the storage balancer for moving the file:\n");
  pChar += rozofs_string_append(pChar,"// - rel: use relative mode (parent/child)\n");
  pChar += rozofs_string_append(pChar,"// - abs: use full pathname mode\n");
  pChar += rozofs_string_append(pChar,"// - fid: use i-node mode \n");
  REBALANCE_CONFIG_SHOW_STRING(mode,"rel");
  pChar += rozofs_string_append(pChar,"// That option indicates the access mode used by the storage balancer for moving the file:\n");
  pChar += rozofs_string_append(pChar,"// - rel: use relative mode (parent/child)\n");
  pChar += rozofs_string_append(pChar,"// - abs: use full pathname mode\n");
  pChar += rozofs_string_append(pChar,"// See --verbose parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_BOOL(verbose,False);
  return pChar;
}
/*____________________________________________________________________________________________
**
** rebalance_config diagnostic function
**
*/
void rebalance_config_generated_show(char * argv[], uint32_t tcpRef, void *bufRef) {
char *pChar = uma_dbg_get_buffer();

  if (argv[1] != NULL) {
    if (strcmp(argv[1],"reload")==0) {
      rebalance_config_read(NULL);
    }
    else {
      if (strcmp("global",argv[1])==0) {
        pChar = show_rebalance_config_module_global(pChar);
      }
      else {
        pChar += rozofs_string_append(pChar, "Unexpected configuration scope\n");
      }
      uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
      return;
    }
  }
 
  if (rebalance_config_file_is_read==0) {
    pChar += rozofs_string_append(pChar,"Can not read configuration file ");
  }
  pChar += rozofs_string_append(pChar,rebalance_config_file_name);
  pChar += rozofs_eol(pChar);
  pChar += rozofs_eol(pChar);
  pChar = show_rebalance_config_module_global(pChar);

  uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
  return;
}
/*____________________________________________________________________________________________
**
** Read the configuration file
*/
static inline void rebalance_config_generated_read(char * fname) {
  config_t          cfg; 

  if (rebalance_config_file_is_read == 0) {
    uma_dbg_addTopicAndMan("rebalanceconf",show_rebalance_config, man_rebalance_config, 0);
    if (fname == NULL) {
      strcpy(rebalance_config_file_name,ROZOFS_CONFIG_DIR"/rebalance.conf");
    }
    else {
      strcpy(rebalance_config_file_name,fname); 
    } 
  }

  if (access(rebalance_config_file_name,R_OK)!=0) {
    fatal("cant access %s: %s.", rebalance_config_file_name, strerror(errno));
  }

  config_init(&cfg);
  rebalance_config_file_is_read = 1;
  if (config_read_file(&cfg, rebalance_config_file_name) == CONFIG_FALSE) {
    if (errno == ENOENT) {
      info("Missing file %s.", rebalance_config_file_name);
    }
    else {
      severe("cant read %s: %s (line %d).", rebalance_config_file_name, config_error_text(&cfg),config_error_line(&cfg));
    }
    rebalance_config_file_is_read = 0;
  }

  /*
  ** global scope configuration parameters
  */
  // This parameter defines the threshold in percentage around the average  
  // storage occupancy to which the balancing applies. Typically, the balancing  
  // stops when all the storages (sid) are included in the window defined by that  
  // threshold.  
  // See the -t parameter of the CLI. 
  REBALANCE_CONFIG_READ_INT_MINMAX(free_avg_tolerance,10,0,100);
  // This parameter defines the free space threshold in percentage before  
  // triggering a storage balancing. If the free available space on sid is higher  
  // than that threshold, the balancing process stops.  
  // See the -a parameter of the CLI. 
  REBALANCE_CONFIG_READ_INT_MINMAX(free_low_threshold,40,0,100);
  // This option defines the scanning frequency in seconds of the storage balancing  
  // process. 
  // See the --frequency parameter of the CLI. 
  REBALANCE_CONFIG_READ_INT(frequency,30);
  // Exclude files that are more recent than the specified delay.  
  // The delay is defined in minutes. 
  // See the --olderm parameter of the CLI. 
  REBALANCE_CONFIG_READ_LONG(older,-1);
  // Exclude files that are older than the specified delay.  
  // The delay is defined in minutes. 
  // See the --newerm parameter of the CLI. 
  REBALANCE_CONFIG_READ_LONG(newer,-1);
  // That option defines the file count threshold before triggering 
  // an effective file move  
  // See the --movecnt parameter of the CLI. 
  REBALANCE_CONFIG_READ_INT(movecnt,10);
  // That option defines the file count threshold before triggering 
  // an effective file move  
  // See the --movesz parameter of the CLI. 
  REBALANCE_CONFIG_READ_STRING(movesz,"1G");
  // That option defines the maximun bandwidth in MB/s allocated to 
  // the file mover. 
  // See the --throughput parameter of the CLI. 
  REBALANCE_CONFIG_READ_INT(throughput,10);
  // That option indicates the access mode used by the storage balancer for moving the file: 
  // - rel: use relative mode (parent/child) 
  // - abs: use full pathname mode 
  // - fid: use i-node mode  
  REBALANCE_CONFIG_READ_STRING(mode,"rel");
  // That option indicates the access mode used by the storage balancer for moving the file: 
  // - rel: use relative mode (parent/child) 
  // - abs: use full pathname mode 
  // See --verbose parameter of the CLI. 
  REBALANCE_CONFIG_READ_BOOL(verbose,False);
 
  config_destroy(&cfg);
}
#endif
