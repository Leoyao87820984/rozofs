/*

 File generated by ../../tools/trash_process_config.py from trash_process_config.input

 Copyright (c) 2010 Fizians SAS. <http://www.fizians.com>
 This file is part of Rozofs.

 Rozofs is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published
 by the Free Software Foundation, version 2.

 Rozofs is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see
 <http://www.gnu.org/licenses/>.
 */
#ifndef _TRASH_PROCESS_CONFIG_READ_SHOW_H
#define _TRASH_PROCESS_CONFIG_READ_SHOW_H

#include <stdint.h>
#include <string.h>
#include <errno.h>
#include <libconfig.h>
#include <unistd.h>
#include <inttypes.h>
#include <sys/types.h>
/*____________________________________________________________________________________________
**
** trash_process_config man function
**
*/
void man_trash_process_config(char * pChar) {
  pChar += rozofs_string_append_underscore(pChar,"\nUsage:\n");
  pChar += rozofs_string_append_bold(pChar,"\ttrashconf");
  pChar += rozofs_string_append     (pChar,"\t\tdisplays the whole trash_process_config configuration.\n");
  pChar += rozofs_string_append_bold(pChar,"\ttrashconf <scope>");
  pChar += rozofs_string_append     (pChar,"\tdisplays only the <scope> configuration part.\n");
  pChar += rozofs_string_append_bold(pChar,"\ttrashconf reload");
  pChar += rozofs_string_append     (pChar,"\treloads and then displays the configuration.\n");
}
/*____________________________________________________________________________________________
**
** global scope configuration parameters
**
*/
char * show_trash_process_config_module_global(char * pChar) {

  pChar += rozofs_string_append_bold(pChar,"#\n");
  pChar += rozofs_string_append_bold(pChar,"# ");
  pChar += rozofs_string_append_bold(pChar,"global");
  pChar += rozofs_string_append_bold(pChar," scope configuration parameters\n");
  pChar += rozofs_string_append_bold(pChar,"#\n\n");

  TRASH_PROCESS_CONFIG_IS_DEFAULT_INT(frequency,12);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// This option defines the scanning frequency in hours of the trash \n");
  pChar += rozofs_string_append(pChar,"// process.\n");
  pChar += rozofs_string_append(pChar,"// See the --frequency parameter of the CLI.\n");
  TRASH_PROCESS_CONFIG_SHOW_INT(frequency,12);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  TRASH_PROCESS_CONFIG_IS_DEFAULT_LONG(older,7);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Exclude files that are more recent than the specified delay. \n");
  pChar += rozofs_string_append(pChar,"// The delay is defined in days.\n");
  pChar += rozofs_string_append(pChar,"// See the --older parameter of the CLI.\n");
  TRASH_PROCESS_CONFIG_SHOW_LONG(older,7);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  TRASH_PROCESS_CONFIG_IS_DEFAULT_INT(deletion_rate,10);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// That option defines the maximun rate in msg/s allocated for\n");
  pChar += rozofs_string_append(pChar,"// files/directories deletion.\n");
  pChar += rozofs_string_append(pChar,"// See the --rate parameter of the CLI.\n");
  TRASH_PROCESS_CONFIG_SHOW_INT(deletion_rate,10);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  TRASH_PROCESS_CONFIG_IS_DEFAULT_INT(scan_rate,-1);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// That option defines the maximun rate in msg/s allocated for inode scanning\n");
  pChar += rozofs_string_append(pChar,"// See the --scan parameter of the CLI.\n");
  TRASH_PROCESS_CONFIG_SHOW_INT(scan_rate,-1);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  TRASH_PROCESS_CONFIG_IS_DEFAULT_BOOL(verbose,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// That option when asserted sets the process in verbose mode\n");
  pChar += rozofs_string_append(pChar,"// See --verbose parameter of the CLI.\n");
  TRASH_PROCESS_CONFIG_SHOW_BOOL(verbose,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  return pChar;
}
/*____________________________________________________________________________________________
**
** trash_process_config diagnostic function
**
*/
void trash_process_config_generated_show(char * argv[], uint32_t tcpRef, void *bufRef) {
char *pChar = uma_dbg_get_buffer();

  if (argv[1] != NULL) {
    if (strcmp(argv[1],"reload")==0) {
      trash_process_config_read(NULL);
    }
    else {
      if (strcmp("global",argv[1])==0) {
        pChar = show_trash_process_config_module_global(pChar);
      }
      else {
        pChar += rozofs_string_append(pChar, "Unexpected configuration scope\n");
      }
      uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
      return;
    }
  }
 
  if (trash_process_config_file_is_read==0) {
    pChar += rozofs_string_append(pChar,"Can not read configuration file ");
  }
  pChar += rozofs_string_append(pChar,trash_process_config_file_name);
  pChar += rozofs_eol(pChar);
  pChar += rozofs_eol(pChar);
  pChar = show_trash_process_config_module_global(pChar);

  uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
  return;
}
/*____________________________________________________________________________________________
**
** Read the configuration file
*/
static inline void trash_process_config_generated_read(char * fname) {
  config_t          cfg; 

  if (trash_process_config_file_is_read == 0) {
    uma_dbg_addTopicAndMan("trashconf",show_trash_process_config, man_trash_process_config, 0);
    if (fname == NULL) {
      strcpy(trash_process_config_file_name,ROZOFS_CONFIG_DIR"/trash.conf");
    }
    else {
      strcpy(trash_process_config_file_name,fname); 
    } 
  }

  if (access(trash_process_config_file_name,R_OK)!=0) {
    fatal("cant access %s: %s.", trash_process_config_file_name, strerror(errno));
  }

  config_init(&cfg);
  trash_process_config_file_is_read = 1;
  if (config_read_file(&cfg, trash_process_config_file_name) == CONFIG_FALSE) {
    if (errno == ENOENT) {
      info("Missing file %s.", trash_process_config_file_name);
    }
    else {
      severe("cant read %s: %s (line %d).", trash_process_config_file_name, config_error_text(&cfg),config_error_line(&cfg));
    }
    trash_process_config_file_is_read = 0;
  }

  /*
  ** global scope configuration parameters
  */
  // This option defines the scanning frequency in hours of the trash  
  // process. 
  // See the --frequency parameter of the CLI. 
  TRASH_PROCESS_CONFIG_READ_INT(frequency,12);
  // Exclude files that are more recent than the specified delay.  
  // The delay is defined in days. 
  // See the --older parameter of the CLI. 
  TRASH_PROCESS_CONFIG_READ_LONG(older,7);
  // That option defines the maximun rate in msg/s allocated for 
  // files/directories deletion. 
  // See the --rate parameter of the CLI. 
  TRASH_PROCESS_CONFIG_READ_INT(deletion_rate,10);
  // That option defines the maximun rate in msg/s allocated for inode scanning 
  // See the --scan parameter of the CLI. 
  TRASH_PROCESS_CONFIG_READ_INT(scan_rate,-1);
  // That option when asserted sets the process in verbose mode 
  // See --verbose parameter of the CLI. 
  TRASH_PROCESS_CONFIG_READ_BOOL(verbose,False);
 
  config_destroy(&cfg);
}
#endif
